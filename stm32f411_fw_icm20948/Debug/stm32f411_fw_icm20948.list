
stm32f411_fw_icm20948.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000345c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036bc  080036bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036c4  080036c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036c8  080036c8  000136c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080036cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000074  08003740  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003740  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a662  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9e  00000000  00000000  0002a706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0002c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d1c  00000000  00000000  0002d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009029  00000000  00000000  00043eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d77  00000000  00000000  0004cf15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3c8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022dc  00000000  00000000  000d3ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080035dc 	.word	0x080035dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	080035dc 	.word	0x080035dc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b26      	ldr	r3, [pc, #152]	; (8000584 <MX_GPIO_Init+0xb4>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a25      	ldr	r2, [pc, #148]	; (8000584 <MX_GPIO_Init+0xb4>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b23      	ldr	r3, [pc, #140]	; (8000584 <MX_GPIO_Init+0xb4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <MX_GPIO_Init+0xb4>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a17      	ldr	r2, [pc, #92]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a10      	ldr	r2, [pc, #64]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_GPIO_Init+0xb4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2110      	movs	r1, #16
 800055a:	480b      	ldr	r0, [pc, #44]	; (8000588 <MX_GPIO_Init+0xb8>)
 800055c:	f000 fd86 	bl	800106c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000560:	2310      	movs	r3, #16
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <MX_GPIO_Init+0xb8>)
 8000578:	f000 fbf4 	bl	8000d64 <HAL_GPIO_Init>

}
 800057c:	bf00      	nop
 800057e:	3728      	adds	r7, #40	; 0x28
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40023800 	.word	0x40023800
 8000588:	40020000 	.word	0x40020000

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	e009      	b.n	8000600 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	60ba      	str	r2, [r7, #8]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffc9 	bl	800058c <ITM_SendChar>
	for(int i = 0; i < len; i++)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	dbf1      	blt.n	80005ec <_write+0x12>
	}
	return len;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fa28 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f824 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f7ff ff56 	bl	80004d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000624:	f000 f88e 	bl	8000744 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // initialize
  icm20948_init(gy_fs_2000dps, odr_1125_hz, ac_fs_2g, odr_1125_hz);
 8000628:	2300      	movs	r3, #0
 800062a:	2201      	movs	r2, #1
 800062c:	2100      	movs	r1, #0
 800062e:	2006      	movs	r0, #6
 8000630:	f002 f8aa 	bl	8002788 <icm20948_init>
  ak09916_init(continuous_measure_100hz);
 8000634:	2008      	movs	r0, #8
 8000636:	f002 f8eb 	bl	8002810 <ak09916_init>

  // check sensor id
  whoami_icm20948();
 800063a:	f001 ffbb 	bl	80025b4 <whoami_icm20948>
  whoami_ak09916();
 800063e:	f001 ffd5 	bl	80025ec <whoami_ak09916>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  read_gyro(&gyro_data, unit_lsb);
 8000642:	2100      	movs	r1, #0
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <main+0x48>)
 8000646:	f002 f90f 	bl	8002868 <read_gyro>
	  read_accel(&accel_data, unit_lsb);
 800064a:	2100      	movs	r1, #0
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <main+0x4c>)
 800064e:	f002 f999 	bl	8002984 <read_accel>
	  read_mag(&mag_data, unit_lsb);
 8000652:	2100      	movs	r1, #0
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <main+0x50>)
 8000656:	f002 fa23 	bl	8002aa0 <read_mag>
	  read_gyro(&gyro_data, unit_lsb);
 800065a:	e7f2      	b.n	8000642 <main+0x2e>
 800065c:	200000b8 	.word	0x200000b8
 8000660:	200000ac 	.word	0x200000ac
 8000664:	200000c4 	.word	0x200000c4

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fae2 	bl	8002c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <SystemClock_Config+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a26      	ldr	r2, [pc, #152]	; (8000730 <SystemClock_Config+0xc8>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <SystemClock_Config+0xcc>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <SystemClock_Config+0xcc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006d8:	230c      	movs	r3, #12
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006dc:	2360      	movs	r3, #96	; 0x60
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fcd7 	bl	80010a0 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f8:	f000 f81e 	bl	8000738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f000 ff39 	bl	8001590 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000724:	f000 f808 	bl	8000738 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	; 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	e7fe      	b.n	8000740 <Error_Handler+0x8>
	...

08000744 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2202      	movs	r2, #2
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2201      	movs	r2, #1
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2218      	movs	r2, #24
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f001 f897 	bl	80018c8 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f7ff ffca 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000d0 	.word	0x200000d0
 80007ac:	40013000 	.word	0x40013000

080007b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a19      	ldr	r2, [pc, #100]	; (8000834 <HAL_SPI_MspInit+0x84>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d12b      	bne.n	800082a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_SPI_MspInit+0x88>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_SPI_MspInit+0x88>)
 80007dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_SPI_MspInit+0x88>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_SPI_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <HAL_SPI_MspInit+0x88>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_SPI_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800080a:	23e0      	movs	r3, #224	; 0xe0
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800081a:	2305      	movs	r3, #5
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <HAL_SPI_MspInit+0x8c>)
 8000826:	f000 fa9d 	bl	8000d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40013000 	.word	0x40013000
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_MspInit+0x4c>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f918 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e00a      	b.n	800090c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008f6:	f3af 8000 	nop.w
 80008fa:	4601      	mov	r1, r0
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	60ba      	str	r2, [r7, #8]
 8000902:	b2ca      	uxtb	r2, r1
 8000904:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf0      	blt.n	80008f6 <_read+0x12>
	}

return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_close>:
	}
	return len;
}

int _close(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000946:	605a      	str	r2, [r3, #4]
	return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <_isatty>:

int _isatty(int file)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	return 1;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f002 f918 	bl	8002bec <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20020000 	.word	0x20020000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	20000090 	.word	0x20000090
 80009f0:	20000148 	.word	0x20000148

080009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a1e:	490e      	ldr	r1, [pc, #56]	; (8000a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a42:	f7ff ffd7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f002 f8d7 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4a:	f7ff fde3 	bl	8000614 <main>
  bx  lr    
 8000a4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a5c:	080036cc 	.word	0x080036cc
  ldr r2, =_sbss
 8000a60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a64:	20000144 	.word	0x20000144

08000a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <HAL_Init+0x40>)
 8000a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_Init+0x40>)
 8000a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x40>)
 8000a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f931 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 f808 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fece 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023c00 	.word	0x40023c00

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x54>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x58>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f93b 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00e      	b.n	8000afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d80a      	bhi.n	8000afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f911 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_InitTick+0x5c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000128 	.word	0x20000128

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000128 	.word	0x20000128

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff ffee 	bl	8000b38 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffde 	bl	8000b38 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008

08000b98 <__NVIC_SetPriorityGrouping>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_SetPriority>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff47 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5c 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e159      	b.n	8001034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 8148 	bne.w	800102e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d005      	beq.n	8000db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d130      	bne.n	8000e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d017      	beq.n	8000e54 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d123      	bne.n	8000ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80a2 	beq.w	800102e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b57      	ldr	r3, [pc, #348]	; (800104c <HAL_GPIO_Init+0x2e8>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a56      	ldr	r2, [pc, #344]	; (800104c <HAL_GPIO_Init+0x2e8>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b54      	ldr	r3, [pc, #336]	; (800104c <HAL_GPIO_Init+0x2e8>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f06:	4a52      	ldr	r2, [pc, #328]	; (8001050 <HAL_GPIO_Init+0x2ec>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a49      	ldr	r2, [pc, #292]	; (8001054 <HAL_GPIO_Init+0x2f0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d019      	beq.n	8000f66 <HAL_GPIO_Init+0x202>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a48      	ldr	r2, [pc, #288]	; (8001058 <HAL_GPIO_Init+0x2f4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d013      	beq.n	8000f62 <HAL_GPIO_Init+0x1fe>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a47      	ldr	r2, [pc, #284]	; (800105c <HAL_GPIO_Init+0x2f8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00d      	beq.n	8000f5e <HAL_GPIO_Init+0x1fa>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a46      	ldr	r2, [pc, #280]	; (8001060 <HAL_GPIO_Init+0x2fc>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d007      	beq.n	8000f5a <HAL_GPIO_Init+0x1f6>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a45      	ldr	r2, [pc, #276]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_GPIO_Init+0x1f2>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e008      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f56:	2307      	movs	r3, #7
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e004      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e002      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f66:	2300      	movs	r3, #0
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	f002 0203 	and.w	r2, r2, #3
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	4093      	lsls	r3, r2
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f78:	4935      	ldr	r1, [pc, #212]	; (8001050 <HAL_GPIO_Init+0x2ec>)
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3302      	adds	r3, #2
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000faa:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd4:	4a24      	ldr	r2, [pc, #144]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <HAL_GPIO_Init+0x304>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_GPIO_Init+0x304>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <HAL_GPIO_Init+0x304>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3301      	adds	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	f67f aea2 	bls.w	8000d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40013800 	.word	0x40013800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400
 800105c:	40020800 	.word	0x40020800
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40021000 	.word	0x40021000
 8001068:	40013c00 	.word	0x40013c00

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001088:	e003      	b.n	8001092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e264      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d075      	beq.n	80011aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010be:	4ba3      	ldr	r3, [pc, #652]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d00c      	beq.n	80010e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ca:	4ba0      	ldr	r3, [pc, #640]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d112      	bne.n	80010fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d6:	4b9d      	ldr	r3, [pc, #628]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010e2:	d10b      	bne.n	80010fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	4b99      	ldr	r3, [pc, #612]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d05b      	beq.n	80011a8 <HAL_RCC_OscConfig+0x108>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d157      	bne.n	80011a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e23f      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d106      	bne.n	8001114 <HAL_RCC_OscConfig+0x74>
 8001106:	4b91      	ldr	r3, [pc, #580]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a90      	ldr	r2, [pc, #576]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e01d      	b.n	8001150 <HAL_RCC_OscConfig+0xb0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x98>
 800111e:	4b8b      	ldr	r3, [pc, #556]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a8a      	ldr	r2, [pc, #552]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b88      	ldr	r3, [pc, #544]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a87      	ldr	r2, [pc, #540]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0xb0>
 8001138:	4b84      	ldr	r3, [pc, #528]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a83      	ldr	r2, [pc, #524]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b81      	ldr	r3, [pc, #516]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a80      	ldr	r2, [pc, #512]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fcee 	bl	8000b38 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fcea 	bl	8000b38 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e204      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0xc0>
 800117e:	e014      	b.n	80011aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fcda 	bl	8000b38 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fcd6 	bl	8000b38 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1f0      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	4b6c      	ldr	r3, [pc, #432]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0xe8>
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d063      	beq.n	800127e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011b6:	4b65      	ldr	r3, [pc, #404]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c2:	4b62      	ldr	r3, [pc, #392]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d11c      	bne.n	8001208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ce:	4b5f      	ldr	r3, [pc, #380]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d116      	bne.n	8001208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	4b5c      	ldr	r3, [pc, #368]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x152>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d001      	beq.n	80011f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e1c4      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f2:	4b56      	ldr	r3, [pc, #344]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4952      	ldr	r1, [pc, #328]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	e03a      	b.n	800127e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001210:	4b4f      	ldr	r3, [pc, #316]	; (8001350 <HAL_RCC_OscConfig+0x2b0>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001216:	f7ff fc8f 	bl	8000b38 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fc8b 	bl	8000b38 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1a5      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	4b46      	ldr	r3, [pc, #280]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b43      	ldr	r3, [pc, #268]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4940      	ldr	r1, [pc, #256]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <HAL_RCC_OscConfig+0x2b0>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fc6e 	bl	8000b38 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fc6a 	bl	8000b38 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e184      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d030      	beq.n	80012ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d016      	beq.n	80012c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_RCC_OscConfig+0x2b4>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001298:	f7ff fc4e 	bl	8000b38 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc4a 	bl	8000b38 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e164      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x200>
 80012be:	e015      	b.n	80012ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_RCC_OscConfig+0x2b4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fc37 	bl	8000b38 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc33 	bl	8000b38 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e14d      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f0      	bne.n	80012ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80a0 	beq.w	800143a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_RCC_OscConfig+0x2ac>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_OscConfig+0x2b8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d121      	bne.n	800137a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_RCC_OscConfig+0x2b8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_RCC_OscConfig+0x2b8>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001342:	f7ff fbf9 	bl	8000b38 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	e011      	b.n	800136e <HAL_RCC_OscConfig+0x2ce>
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	42470000 	.word	0x42470000
 8001354:	42470e80 	.word	0x42470e80
 8001358:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135c:	f7ff fbec 	bl	8000b38 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e106      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b85      	ldr	r3, [pc, #532]	; (8001584 <HAL_RCC_OscConfig+0x4e4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d106      	bne.n	8001390 <HAL_RCC_OscConfig+0x2f0>
 8001382:	4b81      	ldr	r3, [pc, #516]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	4a80      	ldr	r2, [pc, #512]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6713      	str	r3, [r2, #112]	; 0x70
 800138e:	e01c      	b.n	80013ca <HAL_RCC_OscConfig+0x32a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b05      	cmp	r3, #5
 8001396:	d10c      	bne.n	80013b2 <HAL_RCC_OscConfig+0x312>
 8001398:	4b7b      	ldr	r3, [pc, #492]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 800139a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139c:	4a7a      	ldr	r2, [pc, #488]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6713      	str	r3, [r2, #112]	; 0x70
 80013a4:	4b78      	ldr	r3, [pc, #480]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	4a77      	ldr	r2, [pc, #476]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	; 0x70
 80013b0:	e00b      	b.n	80013ca <HAL_RCC_OscConfig+0x32a>
 80013b2:	4b75      	ldr	r3, [pc, #468]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	4a74      	ldr	r2, [pc, #464]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6713      	str	r3, [r2, #112]	; 0x70
 80013be:	4b72      	ldr	r3, [pc, #456]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c2:	4a71      	ldr	r2, [pc, #452]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d015      	beq.n	80013fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d2:	f7ff fbb1 	bl	8000b38 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	e00a      	b.n	80013f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff fbad 	bl	8000b38 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e0c5      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0ee      	beq.n	80013da <HAL_RCC_OscConfig+0x33a>
 80013fc:	e014      	b.n	8001428 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb9b 	bl	8000b38 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff fb97 	bl	8000b38 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f241 3288 	movw	r2, #5000	; 0x1388
 8001414:	4293      	cmp	r3, r2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e0af      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141c:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ee      	bne.n	8001406 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d105      	bne.n	800143a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142e:	4b56      	ldr	r3, [pc, #344]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a55      	ldr	r2, [pc, #340]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 8001434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 809b 	beq.w	800157a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001444:	4b50      	ldr	r3, [pc, #320]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b08      	cmp	r3, #8
 800144e:	d05c      	beq.n	800150a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d141      	bne.n	80014dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001458:	4b4c      	ldr	r3, [pc, #304]	; (800158c <HAL_RCC_OscConfig+0x4ec>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fb6b 	bl	8000b38 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001466:	f7ff fb67 	bl	8000b38 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e081      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001478:	4b43      	ldr	r3, [pc, #268]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69da      	ldr	r2, [r3, #28]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	019b      	lsls	r3, r3, #6
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	085b      	lsrs	r3, r3, #1
 800149c:	3b01      	subs	r3, #1
 800149e:	041b      	lsls	r3, r3, #16
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	061b      	lsls	r3, r3, #24
 80014a8:	4937      	ldr	r1, [pc, #220]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_RCC_OscConfig+0x4ec>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb40 	bl	8000b38 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff fb3c 	bl	8000b38 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e056      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x41c>
 80014da:	e04e      	b.n	800157a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_OscConfig+0x4ec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fb29 	bl	8000b38 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff fb25 	bl	8000b38 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e03f      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x44a>
 8001508:	e037      	b.n	800157a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e032      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_RCC_OscConfig+0x4e8>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d028      	beq.n	8001576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d121      	bne.n	8001576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d11a      	bne.n	8001576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001546:	4013      	ands	r3, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800154c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800154e:	4293      	cmp	r3, r2
 8001550:	d111      	bne.n	8001576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	3b01      	subs	r3, #1
 8001560:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d107      	bne.n	8001576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40007000 	.word	0x40007000
 8001588:	40023800 	.word	0x40023800
 800158c:	42470060 	.word	0x42470060

08001590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0cc      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d90c      	bls.n	80015cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b65      	ldr	r3, [pc, #404]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0b8      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a58      	ldr	r2, [pc, #352]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015fc:	4b53      	ldr	r3, [pc, #332]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	494d      	ldr	r1, [pc, #308]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d044      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d119      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e07f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d003      	beq.n	800164e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	2b03      	cmp	r3, #3
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e067      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f023 0203 	bic.w	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4934      	ldr	r1, [pc, #208]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff fa5a 	bl	8000b38 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	e00a      	b.n	800169e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f7ff fa56 	bl	8000b38 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e04f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 020c 	and.w	r2, r3, #12
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d1eb      	bne.n	8001688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d20c      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e032      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4916      	ldr	r1, [pc, #88]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001716:	f000 f821 	bl	800175c <HAL_RCC_GetSysClockFreq>
 800171a:	4602      	mov	r2, r0
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	490a      	ldr	r1, [pc, #40]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	5ccb      	ldrb	r3, [r1, r3]
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_ClockConfig+0x1c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff f9ba 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023c00 	.word	0x40023c00
 800174c:	40023800 	.word	0x40023800
 8001750:	08003648 	.word	0x08003648
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001762:	2100      	movs	r1, #0
 8001764:	6079      	str	r1, [r7, #4]
 8001766:	2100      	movs	r1, #0
 8001768:	60f9      	str	r1, [r7, #12]
 800176a:	2100      	movs	r1, #0
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800176e:	2100      	movs	r1, #0
 8001770:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001772:	4952      	ldr	r1, [pc, #328]	; (80018bc <HAL_RCC_GetSysClockFreq+0x160>)
 8001774:	6889      	ldr	r1, [r1, #8]
 8001776:	f001 010c 	and.w	r1, r1, #12
 800177a:	2908      	cmp	r1, #8
 800177c:	d00d      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x3e>
 800177e:	2908      	cmp	r1, #8
 8001780:	f200 8094 	bhi.w	80018ac <HAL_RCC_GetSysClockFreq+0x150>
 8001784:	2900      	cmp	r1, #0
 8001786:	d002      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x32>
 8001788:	2904      	cmp	r1, #4
 800178a:	d003      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x38>
 800178c:	e08e      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800178e:	4b4c      	ldr	r3, [pc, #304]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001790:	60bb      	str	r3, [r7, #8]
       break;
 8001792:	e08e      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001794:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001796:	60bb      	str	r3, [r7, #8]
      break;
 8001798:	e08b      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800179a:	4948      	ldr	r1, [pc, #288]	; (80018bc <HAL_RCC_GetSysClockFreq+0x160>)
 800179c:	6849      	ldr	r1, [r1, #4]
 800179e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80017a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a4:	4945      	ldr	r1, [pc, #276]	; (80018bc <HAL_RCC_GetSysClockFreq+0x160>)
 80017a6:	6849      	ldr	r1, [r1, #4]
 80017a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80017ac:	2900      	cmp	r1, #0
 80017ae:	d024      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b0:	4942      	ldr	r1, [pc, #264]	; (80018bc <HAL_RCC_GetSysClockFreq+0x160>)
 80017b2:	6849      	ldr	r1, [r1, #4]
 80017b4:	0989      	lsrs	r1, r1, #6
 80017b6:	4608      	mov	r0, r1
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80017c0:	f04f 0500 	mov.w	r5, #0
 80017c4:	ea00 0204 	and.w	r2, r0, r4
 80017c8:	ea01 0305 	and.w	r3, r1, r5
 80017cc:	493d      	ldr	r1, [pc, #244]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80017ce:	fb01 f003 	mul.w	r0, r1, r3
 80017d2:	2100      	movs	r1, #0
 80017d4:	fb01 f102 	mul.w	r1, r1, r2
 80017d8:	1844      	adds	r4, r0, r1
 80017da:	493a      	ldr	r1, [pc, #232]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80017dc:	fba2 0101 	umull	r0, r1, r2, r1
 80017e0:	1863      	adds	r3, r4, r1
 80017e2:	4619      	mov	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	f7fe fcf4 	bl	80001d8 <__aeabi_uldivmod>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4613      	mov	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e04a      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b30      	ldr	r3, [pc, #192]	; (80018bc <HAL_RCC_GetSysClockFreq+0x160>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	461a      	mov	r2, r3
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	ea02 0400 	and.w	r4, r2, r0
 8001812:	ea03 0501 	and.w	r5, r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	014b      	lsls	r3, r1, #5
 8001824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001828:	0142      	lsls	r2, r0, #5
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	1b00      	subs	r0, r0, r4
 8001830:	eb61 0105 	sbc.w	r1, r1, r5
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	018b      	lsls	r3, r1, #6
 800183e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001842:	0182      	lsls	r2, r0, #6
 8001844:	1a12      	subs	r2, r2, r0
 8001846:	eb63 0301 	sbc.w	r3, r3, r1
 800184a:	f04f 0000 	mov.w	r0, #0
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	00d9      	lsls	r1, r3, #3
 8001854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001858:	00d0      	lsls	r0, r2, #3
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	1912      	adds	r2, r2, r4
 8001860:	eb45 0303 	adc.w	r3, r5, r3
 8001864:	f04f 0000 	mov.w	r0, #0
 8001868:	f04f 0100 	mov.w	r1, #0
 800186c:	0299      	lsls	r1, r3, #10
 800186e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001872:	0290      	lsls	r0, r2, #10
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	461a      	mov	r2, r3
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	f7fe fca8 	bl	80001d8 <__aeabi_uldivmod>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4613      	mov	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_RCC_GetSysClockFreq+0x160>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	3301      	adds	r3, #1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	60bb      	str	r3, [r7, #8]
      break;
 80018aa:	e002      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80018ae:	60bb      	str	r3, [r7, #8]
      break;
 80018b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b2:	68bb      	ldr	r3, [r7, #8]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bdb0      	pop	{r4, r5, r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	00f42400 	.word	0x00f42400
 80018c4:	017d7840 	.word	0x017d7840

080018c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07b      	b.n	80019d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d108      	bne.n	80018f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018ea:	d009      	beq.n	8001900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
 80018f2:	e005      	b.n	8001900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7fe ff48 	bl	80007b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001984:	ea42 0103 	orr.w	r1, r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f003 0104 	and.w	r1, r3, #4
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	f003 0210 	and.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69da      	ldr	r2, [r3, #28]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b088      	sub	sp, #32
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_SPI_Transmit+0x22>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e126      	b.n	8001c4a <HAL_SPI_Transmit+0x270>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a04:	f7ff f898 	bl	8000b38 <HAL_GetTick>
 8001a08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d002      	beq.n	8001a20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a1e:	e10b      	b.n	8001c38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_SPI_Transmit+0x52>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a30:	e102      	b.n	8001c38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2203      	movs	r2, #3
 8001a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	88fa      	ldrh	r2, [r7, #6]
 8001a4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	88fa      	ldrh	r2, [r7, #6]
 8001a50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a78:	d10f      	bne.n	8001a9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa4:	2b40      	cmp	r3, #64	; 0x40
 8001aa6:	d007      	beq.n	8001ab8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ac0:	d14b      	bne.n	8001b5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_SPI_Transmit+0xf6>
 8001aca:	8afb      	ldrh	r3, [r7, #22]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d13e      	bne.n	8001b4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	881a      	ldrh	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	1c9a      	adds	r2, r3, #2
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001af4:	e02b      	b.n	8001b4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d112      	bne.n	8001b2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	881a      	ldrh	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	1c9a      	adds	r2, r3, #2
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b28:	e011      	b.n	8001b4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b2a:	f7ff f805 	bl	8000b38 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d803      	bhi.n	8001b42 <HAL_SPI_Transmit+0x168>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d102      	bne.n	8001b48 <HAL_SPI_Transmit+0x16e>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b4c:	e074      	b.n	8001c38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ce      	bne.n	8001af6 <HAL_SPI_Transmit+0x11c>
 8001b58:	e04c      	b.n	8001bf4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <HAL_SPI_Transmit+0x18e>
 8001b62:	8afb      	ldrh	r3, [r7, #22]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d140      	bne.n	8001bea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	330c      	adds	r3, #12
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b8e:	e02c      	b.n	8001bea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d113      	bne.n	8001bc6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bc4:	e011      	b.n	8001bea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bc6:	f7fe ffb7 	bl	8000b38 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d803      	bhi.n	8001bde <HAL_SPI_Transmit+0x204>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d102      	bne.n	8001be4 <HAL_SPI_Transmit+0x20a>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001be8:	e026      	b.n	8001c38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1cd      	bne.n	8001b90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 fbcb 	bl	8002394 <SPI_EndRxTxTransaction>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2220      	movs	r2, #32
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10a      	bne.n	8001c28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	77fb      	strb	r3, [r7, #31]
 8001c34:	e000      	b.n	8001c38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001c36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b088      	sub	sp, #32
 8001c56:	af02      	add	r7, sp, #8
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c6e:	d112      	bne.n	8001c96 <HAL_SPI_Receive+0x44>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10e      	bne.n	8001c96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	4613      	mov	r3, r2
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f8f1 	bl	8001e74 <HAL_SPI_TransmitReceive>
 8001c92:	4603      	mov	r3, r0
 8001c94:	e0ea      	b.n	8001e6c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_SPI_Receive+0x52>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e0e3      	b.n	8001e6c <HAL_SPI_Receive+0x21a>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cac:	f7fe ff44 	bl	8000b38 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d002      	beq.n	8001cc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cc2:	e0ca      	b.n	8001e5a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_SPI_Receive+0x7e>
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cd4:	e0c1      	b.n	8001e5a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2204      	movs	r2, #4
 8001cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	88fa      	ldrh	r2, [r7, #6]
 8001cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1c:	d10f      	bne.n	8001d3e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d48:	2b40      	cmp	r3, #64	; 0x40
 8001d4a:	d007      	beq.n	8001d5c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d162      	bne.n	8001e2a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d64:	e02e      	b.n	8001dc4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d115      	bne.n	8001da0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f103 020c 	add.w	r2, r3, #12
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d9e:	e011      	b.n	8001dc4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001da0:	f7fe feca 	bl	8000b38 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d803      	bhi.n	8001db8 <HAL_SPI_Receive+0x166>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db6:	d102      	bne.n	8001dbe <HAL_SPI_Receive+0x16c>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001dc2:	e04a      	b.n	8001e5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1cb      	bne.n	8001d66 <HAL_SPI_Receive+0x114>
 8001dce:	e031      	b.n	8001e34 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d113      	bne.n	8001e06 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de8:	b292      	uxth	r2, r2
 8001dea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df0:	1c9a      	adds	r2, r3, #2
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e04:	e011      	b.n	8001e2a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e06:	f7fe fe97 	bl	8000b38 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d803      	bhi.n	8001e1e <HAL_SPI_Receive+0x1cc>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d102      	bne.n	8001e24 <HAL_SPI_Receive+0x1d2>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e28:	e017      	b.n	8001e5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1cd      	bne.n	8001dd0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fa45 	bl	80022c8 <SPI_EndRxTransaction>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
 8001e56:	e000      	b.n	8001e5a <HAL_SPI_Receive+0x208>
  }

error :
 8001e58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	; 0x30
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e82:	2301      	movs	r3, #1
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_SPI_TransmitReceive+0x26>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e18a      	b.n	80021b0 <HAL_SPI_TransmitReceive+0x33c>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ea2:	f7fe fe49 	bl	8000b38 <HAL_GetTick>
 8001ea6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d00f      	beq.n	8001ee4 <HAL_SPI_TransmitReceive+0x70>
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eca:	d107      	bne.n	8001edc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <HAL_SPI_TransmitReceive+0x68>
 8001ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d003      	beq.n	8001ee4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ee2:	e15b      	b.n	800219c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_SPI_TransmitReceive+0x82>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_SPI_TransmitReceive+0x82>
 8001ef0:	887b      	ldrh	r3, [r7, #2]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001efc:	e14e      	b.n	800219c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d003      	beq.n	8001f12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	887a      	ldrh	r2, [r7, #2]
 8001f3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	2b40      	cmp	r3, #64	; 0x40
 8001f54:	d007      	beq.n	8001f66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f6e:	d178      	bne.n	8002062 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HAL_SPI_TransmitReceive+0x10a>
 8001f78:	8b7b      	ldrh	r3, [r7, #26]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d166      	bne.n	800204c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	881a      	ldrh	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	1c9a      	adds	r2, r3, #2
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fa2:	e053      	b.n	800204c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d11b      	bne.n	8001fea <HAL_SPI_TransmitReceive+0x176>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d016      	beq.n	8001fea <HAL_SPI_TransmitReceive+0x176>
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d113      	bne.n	8001fea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	881a      	ldrh	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	1c9a      	adds	r2, r3, #2
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d119      	bne.n	800202c <HAL_SPI_TransmitReceive+0x1b8>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d014      	beq.n	800202c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	b292      	uxth	r2, r2
 800200e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	1c9a      	adds	r2, r3, #2
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002028:	2301      	movs	r3, #1
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800202c:	f7fe fd84 	bl	8000b38 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002038:	429a      	cmp	r2, r3
 800203a:	d807      	bhi.n	800204c <HAL_SPI_TransmitReceive+0x1d8>
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002042:	d003      	beq.n	800204c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800204a:	e0a7      	b.n	800219c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1a6      	bne.n	8001fa4 <HAL_SPI_TransmitReceive+0x130>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1a1      	bne.n	8001fa4 <HAL_SPI_TransmitReceive+0x130>
 8002060:	e07c      	b.n	800215c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_SPI_TransmitReceive+0x1fc>
 800206a:	8b7b      	ldrh	r3, [r7, #26]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d16b      	bne.n	8002148 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	330c      	adds	r3, #12
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002096:	e057      	b.n	8002148 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d11c      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x26c>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d017      	beq.n	80020e0 <HAL_SPI_TransmitReceive+0x26c>
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d114      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d119      	bne.n	8002122 <HAL_SPI_TransmitReceive+0x2ae>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d014      	beq.n	8002122 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800211e:	2301      	movs	r3, #1
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002122:	f7fe fd09 	bl	8000b38 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800212e:	429a      	cmp	r2, r3
 8002130:	d803      	bhi.n	800213a <HAL_SPI_TransmitReceive+0x2c6>
 8002132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d102      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x2cc>
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002146:	e029      	b.n	800219c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1a2      	bne.n	8002098 <HAL_SPI_TransmitReceive+0x224>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d19d      	bne.n	8002098 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800215c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f917 	bl	8002394 <SPI_EndRxTxTransaction>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002178:	e010      	b.n	800219c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10b      	bne.n	800219a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	e000      	b.n	800219c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800219a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3730      	adds	r7, #48	; 0x30
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021c8:	f7fe fcb6 	bl	8000b38 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021d8:	f7fe fcae 	bl	8000b38 <HAL_GetTick>
 80021dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	015b      	lsls	r3, r3, #5
 80021e4:	0d1b      	lsrs	r3, r3, #20
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021ee:	e054      	b.n	800229a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d050      	beq.n	800229a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021f8:	f7fe fc9e 	bl	8000b38 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	429a      	cmp	r2, r3
 8002206:	d902      	bls.n	800220e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d13d      	bne.n	800228a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800221c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002226:	d111      	bne.n	800224c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002230:	d004      	beq.n	800223c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223a:	d107      	bne.n	800224c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800224a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002254:	d10f      	bne.n	8002276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e017      	b.n	80022ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3b01      	subs	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4013      	ands	r3, r2
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d19b      	bne.n	80021f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000

080022c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022dc:	d111      	bne.n	8002302 <SPI_EndRxTransaction+0x3a>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e6:	d004      	beq.n	80022f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f0:	d107      	bne.n	8002302 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800230a:	d12a      	bne.n	8002362 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002314:	d012      	beq.n	800233c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2200      	movs	r2, #0
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff ff49 	bl	80021b8 <SPI_WaitFlagStateUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d02d      	beq.n	8002388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e026      	b.n	800238a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	2101      	movs	r1, #1
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7ff ff36 	bl	80021b8 <SPI_WaitFlagStateUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01a      	beq.n	8002388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e013      	b.n	800238a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2200      	movs	r2, #0
 800236a:	2101      	movs	r1, #1
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f7ff ff23 	bl	80021b8 <SPI_WaitFlagStateUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e000      	b.n	800238a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <SPI_EndRxTxTransaction+0x7c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1b      	ldr	r2, [pc, #108]	; (8002414 <SPI_EndRxTxTransaction+0x80>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0d5b      	lsrs	r3, r3, #21
 80023ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023be:	d112      	bne.n	80023e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff fef4 	bl	80021b8 <SPI_WaitFlagStateUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f043 0220 	orr.w	r2, r3, #32
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e00f      	b.n	8002406 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d0f2      	beq.n	80023e6 <SPI_EndRxTxTransaction+0x52>
 8002400:	e000      	b.n	8002404 <SPI_EndRxTxTransaction+0x70>
        break;
 8002402:	bf00      	nop
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000000 	.word	0x20000000
 8002414:	165e9f81 	.word	0x165e9f81

08002418 <cs_high>:
float mag_typ = 0.15;


// cs state
void cs_high()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PIN_PORT, CS_PIN_NUMBER, SET);	
 800241c:	2201      	movs	r2, #1
 800241e:	2110      	movs	r1, #16
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <cs_high+0x14>)
 8002422:	f7fe fe23 	bl	800106c <HAL_GPIO_WritePin>
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40020000 	.word	0x40020000

08002430 <cs_low>:

void cs_low()
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PIN_PORT, CS_PIN_NUMBER, RESET);
 8002434:	2200      	movs	r2, #0
 8002436:	2110      	movs	r1, #16
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <cs_low+0x14>)
 800243a:	f7fe fe17 	bl	800106c <HAL_GPIO_WritePin>
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40020000 	.word	0x40020000

08002448 <select_user_bank>:

// user bank
void select_user_bank(userbank_e ub)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
	cs_low();
 8002452:	f7ff ffed 	bl	8002430 <cs_low>
	tx_buffer[0] = WRITE | B0_REG_BANK_SEL;
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <select_user_bank+0x34>)
 8002458:	227f      	movs	r2, #127	; 0x7f
 800245a:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = ub;
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <select_user_bank+0x34>)
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	7053      	strb	r3, [r2, #1]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 2, 10);
 8002462:	230a      	movs	r3, #10
 8002464:	2202      	movs	r2, #2
 8002466:	4905      	ldr	r1, [pc, #20]	; (800247c <select_user_bank+0x34>)
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <select_user_bank+0x38>)
 800246a:	f7ff fab6 	bl	80019da <HAL_SPI_Transmit>
	cs_high();
 800246e:	f7ff ffd3 	bl	8002418 <cs_high>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000094 	.word	0x20000094
 8002480:	200000d0 	.word	0x200000d0

08002484 <read_icm20948>:

// spi
void read_icm20948(uint8_t regaddr, uint8_t len)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	460a      	mov	r2, r1
 800248e:	71fb      	strb	r3, [r7, #7]
 8002490:	4613      	mov	r3, r2
 8002492:	71bb      	strb	r3, [r7, #6]
	cs_low();
 8002494:	f7ff ffcc 	bl	8002430 <cs_low>
	tx_buffer[0] = READ | regaddr;
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <read_icm20948+0x48>)
 80024a2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 1, 10);
 80024a4:	230a      	movs	r3, #10
 80024a6:	2201      	movs	r2, #1
 80024a8:	4908      	ldr	r1, [pc, #32]	; (80024cc <read_icm20948+0x48>)
 80024aa:	4809      	ldr	r0, [pc, #36]	; (80024d0 <read_icm20948+0x4c>)
 80024ac:	f7ff fa95 	bl	80019da <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_ICM20948, rx_buffer, len, 10);
 80024b0:	79bb      	ldrb	r3, [r7, #6]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	230a      	movs	r3, #10
 80024b6:	4907      	ldr	r1, [pc, #28]	; (80024d4 <read_icm20948+0x50>)
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <read_icm20948+0x4c>)
 80024ba:	f7ff fbca 	bl	8001c52 <HAL_SPI_Receive>
	cs_high();
 80024be:	f7ff ffab 	bl	8002418 <cs_high>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000094 	.word	0x20000094
 80024d0:	200000d0 	.word	0x200000d0
 80024d4:	2000009c 	.word	0x2000009c

080024d8 <write_icm20948>:

void write_icm20948(uint8_t regaddr, uint8_t data)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	460a      	mov	r2, r1
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	4613      	mov	r3, r2
 80024e6:	71bb      	strb	r3, [r7, #6]
	cs_low();
 80024e8:	f7ff ffa2 	bl	8002430 <cs_low>
	tx_buffer[0] = WRITE | regaddr;
 80024ec:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <write_icm20948+0x40>)
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = data;
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <write_icm20948+0x40>)
 80024f4:	79bb      	ldrb	r3, [r7, #6]
 80024f6:	7053      	strb	r3, [r2, #1]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 2, 10);
 80024f8:	230a      	movs	r3, #10
 80024fa:	2202      	movs	r2, #2
 80024fc:	4906      	ldr	r1, [pc, #24]	; (8002518 <write_icm20948+0x40>)
 80024fe:	4807      	ldr	r0, [pc, #28]	; (800251c <write_icm20948+0x44>)
 8002500:	f7ff fa6b 	bl	80019da <HAL_SPI_Transmit>
	cs_high();
 8002504:	f7ff ff88 	bl	8002418 <cs_high>

	// necessary
	HAL_Delay(1);
 8002508:	2001      	movs	r0, #1
 800250a:	f7fe fb21 	bl	8000b50 <HAL_Delay>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000094 	.word	0x20000094
 800251c:	200000d0 	.word	0x200000d0

08002520 <read_ak09916>:

// auxiliary i2c
void read_ak09916(uint8_t regaddr, uint8_t len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	460a      	mov	r2, r1
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	4613      	mov	r3, r2
 800252e:	71bb      	strb	r3, [r7, #6]
	select_user_bank(userbank_3);
 8002530:	2030      	movs	r0, #48	; 0x30
 8002532:	f7ff ff89 	bl	8002448 <select_user_bank>

	write_icm20948(B3_I2C_SLV0_ADDR, READ | ADDRESS_AK09916);
 8002536:	218c      	movs	r1, #140	; 0x8c
 8002538:	2003      	movs	r0, #3
 800253a:	f7ff ffcd 	bl	80024d8 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_REG, regaddr); 
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4619      	mov	r1, r3
 8002542:	2004      	movs	r0, #4
 8002544:	f7ff ffc8 	bl	80024d8 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_CTRL, I2C_SLV_EN | len);
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4619      	mov	r1, r3
 8002552:	2005      	movs	r0, #5
 8002554:	f7ff ffc0 	bl	80024d8 <write_icm20948>

	select_user_bank(userbank_0);
 8002558:	2000      	movs	r0, #0
 800255a:	f7ff ff75 	bl	8002448 <select_user_bank>
	read_icm20948(B0_EXT_SLV_SENS_DATA_00, len);
 800255e:	79bb      	ldrb	r3, [r7, #6]
 8002560:	4619      	mov	r1, r3
 8002562:	203b      	movs	r0, #59	; 0x3b
 8002564:	f7ff ff8e 	bl	8002484 <read_icm20948>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <write_ak09916>:

void write_ak09916(uint8_t regaddr, uint8_t data)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	460a      	mov	r2, r1
 800257a:	71fb      	strb	r3, [r7, #7]
 800257c:	4613      	mov	r3, r2
 800257e:	71bb      	strb	r3, [r7, #6]
	select_user_bank(userbank_3);
 8002580:	2030      	movs	r0, #48	; 0x30
 8002582:	f7ff ff61 	bl	8002448 <select_user_bank>

	write_icm20948(B3_I2C_SLV0_ADDR, WRITE | ADDRESS_AK09916);
 8002586:	210c      	movs	r1, #12
 8002588:	2003      	movs	r0, #3
 800258a:	f7ff ffa5 	bl	80024d8 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_REG, regaddr);
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	4619      	mov	r1, r3
 8002592:	2004      	movs	r0, #4
 8002594:	f7ff ffa0 	bl	80024d8 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_DO, data);
 8002598:	79bb      	ldrb	r3, [r7, #6]
 800259a:	4619      	mov	r1, r3
 800259c:	2006      	movs	r0, #6
 800259e:	f7ff ff9b 	bl	80024d8 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_CTRL, 0x81);
 80025a2:	2181      	movs	r1, #129	; 0x81
 80025a4:	2005      	movs	r0, #5
 80025a6:	f7ff ff97 	bl	80024d8 <write_icm20948>

}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <whoami_icm20948>:

// check sensor id
void whoami_icm20948()
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	select_user_bank(userbank_0);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7ff ff45 	bl	8002448 <select_user_bank>
	read_icm20948(B0_WHO_AM_I, 1);
 80025be:	2101      	movs	r1, #1
 80025c0:	2000      	movs	r0, #0
 80025c2:	f7ff ff5f 	bl	8002484 <read_icm20948>
	while(rx_buffer[0] != DEVICE_ID_ICM20948)
 80025c6:	e006      	b.n	80025d6 <whoami_icm20948+0x22>
		{
			printf("it isn't icm20948\n");
 80025c8:	4806      	ldr	r0, [pc, #24]	; (80025e4 <whoami_icm20948+0x30>)
 80025ca:	f000 fbaf 	bl	8002d2c <puts>
			HAL_Delay(1000);
 80025ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d2:	f7fe fabd 	bl	8000b50 <HAL_Delay>
	while(rx_buffer[0] != DEVICE_ID_ICM20948)
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <whoami_icm20948+0x34>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2bea      	cmp	r3, #234	; 0xea
 80025dc:	d1f4      	bne.n	80025c8 <whoami_icm20948+0x14>
		}
}
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	080035f4 	.word	0x080035f4
 80025e8:	2000009c 	.word	0x2000009c

080025ec <whoami_ak09916>:

void whoami_ak09916()
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	read_ak09916(MAG_WIA2, 1);
 80025f0:	2101      	movs	r1, #1
 80025f2:	2001      	movs	r0, #1
 80025f4:	f7ff ff94 	bl	8002520 <read_ak09916>
	while(rx_buffer[0] != DEVICE_ID_AK09916)
 80025f8:	e006      	b.n	8002608 <whoami_ak09916+0x1c>
		{
			printf("it isn't ak09916\n");
 80025fa:	4807      	ldr	r0, [pc, #28]	; (8002618 <whoami_ak09916+0x2c>)
 80025fc:	f000 fb96 	bl	8002d2c <puts>
			HAL_Delay(1000);
 8002600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002604:	f7fe faa4 	bl	8000b50 <HAL_Delay>
	while(rx_buffer[0] != DEVICE_ID_AK09916)
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <whoami_ak09916+0x30>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d1f4      	bne.n	80025fa <whoami_ak09916+0xe>
		}
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	08003608 	.word	0x08003608
 800261c:	2000009c 	.word	0x2000009c

08002620 <set_gyro_full_scale>:

// set full scale and ODR
void set_gyro_full_scale(gyro_fs_e gyro_fs)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
	select_user_bank(userbank_2);
 800262a:	2020      	movs	r0, #32
 800262c:	f7ff ff0c 	bl	8002448 <select_user_bank>
	write_icm20948(B2_GYRO_CONFIG_1, gyro_fs | GYRO_FCHOICE);
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	2001      	movs	r0, #1
 800263c:	f7ff ff4c 	bl	80024d8 <write_icm20948>

	switch(gyro_fs)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	2b06      	cmp	r3, #6
 8002644:	d820      	bhi.n	8002688 <set_gyro_full_scale+0x68>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <set_gyro_full_scale+0x2c>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	08002669 	.word	0x08002669
 8002650:	08002689 	.word	0x08002689
 8002654:	08002671 	.word	0x08002671
 8002658:	08002689 	.word	0x08002689
 800265c:	08002679 	.word	0x08002679
 8002660:	08002689 	.word	0x08002689
 8002664:	08002681 	.word	0x08002681
	{
		case gy_fs_250dps :
			gyro_typ = 131;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <set_gyro_full_scale+0x7c>)
 800266a:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <set_gyro_full_scale+0x80>)
 800266c:	601a      	str	r2, [r3, #0]
			break;
 800266e:	e010      	b.n	8002692 <set_gyro_full_scale+0x72>
		
		case gy_fs_500dps :
			gyro_typ = 65.5;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <set_gyro_full_scale+0x7c>)
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <set_gyro_full_scale+0x84>)
 8002674:	601a      	str	r2, [r3, #0]
			break;
 8002676:	e00c      	b.n	8002692 <set_gyro_full_scale+0x72>

		case gy_fs_1000dps :
			gyro_typ = 32.8;
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <set_gyro_full_scale+0x7c>)
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <set_gyro_full_scale+0x88>)
 800267c:	601a      	str	r2, [r3, #0]
			break;
 800267e:	e008      	b.n	8002692 <set_gyro_full_scale+0x72>
		
		case gy_fs_2000dps :
			gyro_typ = 16.4;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <set_gyro_full_scale+0x7c>)
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <set_gyro_full_scale+0x8c>)
 8002684:	601a      	str	r2, [r3, #0]
			break;
 8002686:	e004      	b.n	8002692 <set_gyro_full_scale+0x72>

		default : 
			gyro_typ = 0;
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <set_gyro_full_scale+0x7c>)
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
	}
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000012c 	.word	0x2000012c
 80026a0:	43030000 	.word	0x43030000
 80026a4:	42830000 	.word	0x42830000
 80026a8:	42033333 	.word	0x42033333
 80026ac:	41833333 	.word	0x41833333

080026b0 <set_accel_full_scale>:

void set_accel_full_scale(accel_fs_e accel_fs)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	select_user_bank(userbank_2);
 80026ba:	2020      	movs	r0, #32
 80026bc:	f7ff fec4 	bl	8002448 <select_user_bank>
	write_icm20948(B2_ACCEL_CONFIG, accel_fs | ACCEL_FCHOICE);
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	4619      	mov	r1, r3
 80026ca:	2014      	movs	r0, #20
 80026cc:	f7ff ff04 	bl	80024d8 <write_icm20948>

	switch(accel_fs)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d825      	bhi.n	8002724 <set_accel_full_scale+0x74>
 80026d8:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <set_accel_full_scale+0x30>)
 80026da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026de:	bf00      	nop
 80026e0:	080026fd 	.word	0x080026fd
 80026e4:	08002725 	.word	0x08002725
 80026e8:	08002707 	.word	0x08002707
 80026ec:	08002725 	.word	0x08002725
 80026f0:	08002711 	.word	0x08002711
 80026f4:	08002725 	.word	0x08002725
 80026f8:	0800271b 	.word	0x0800271b
	{
		case ac_fs_2g :
			accel_typ = 16384;
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <set_accel_full_scale+0x88>)
 80026fe:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002702:	601a      	str	r2, [r3, #0]
			break;
 8002704:	e013      	b.n	800272e <set_accel_full_scale+0x7e>
		
		case ac_fs_4g :
			accel_typ = 8192;
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <set_accel_full_scale+0x88>)
 8002708:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800270c:	601a      	str	r2, [r3, #0]
			break;
 800270e:	e00e      	b.n	800272e <set_accel_full_scale+0x7e>

		case ac_fs_8g :
			accel_typ = 4096;
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <set_accel_full_scale+0x88>)
 8002712:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002716:	601a      	str	r2, [r3, #0]
			break;
 8002718:	e009      	b.n	800272e <set_accel_full_scale+0x7e>
		
		case ac_fs_16g :
			accel_typ = 2048;
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <set_accel_full_scale+0x88>)
 800271c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002720:	601a      	str	r2, [r3, #0]
			break;
 8002722:	e004      	b.n	800272e <set_accel_full_scale+0x7e>

		default : 
			accel_typ = 0;
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <set_accel_full_scale+0x88>)
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
	}
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000130 	.word	0x20000130

0800273c <set_gyro_odr>:

void set_gyro_odr(odr_e odr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
	select_user_bank(userbank_2);
 8002746:	2020      	movs	r0, #32
 8002748:	f7ff fe7e 	bl	8002448 <select_user_bank>

	uint8_t gy_div = odr;
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	73fb      	strb	r3, [r7, #15]
	write_icm20948(B2_GYRO_SMPLRT_DIV, gy_div);
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	4619      	mov	r1, r3
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff febf 	bl	80024d8 <write_icm20948>
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <set_accel_odr>:

void set_accel_odr(odr_e odr)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	71fb      	strb	r3, [r7, #7]
	select_user_bank(userbank_2);
 800276c:	2020      	movs	r0, #32
 800276e:	f7ff fe6b 	bl	8002448 <select_user_bank>

	uint8_t ac_div = odr;
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	73fb      	strb	r3, [r7, #15]
	write_icm20948(B2_ACCEL_SMPLRT_DIV_2, ac_div);
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	4619      	mov	r1, r3
 800277a:	2011      	movs	r0, #17
 800277c:	f7ff feac 	bl	80024d8 <write_icm20948>
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <icm20948_init>:

// initialize
void icm20948_init(gyro_fs_e gy_fs, odr_e gy_odr, accel_fs_e ac_fs, odr_e ac_odr)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4604      	mov	r4, r0
 8002790:	4608      	mov	r0, r1
 8002792:	4611      	mov	r1, r2
 8002794:	461a      	mov	r2, r3
 8002796:	4623      	mov	r3, r4
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	4603      	mov	r3, r0
 800279c:	71bb      	strb	r3, [r7, #6]
 800279e:	460b      	mov	r3, r1
 80027a0:	717b      	strb	r3, [r7, #5]
 80027a2:	4613      	mov	r3, r2
 80027a4:	713b      	strb	r3, [r7, #4]
	// ICM20948 Reset
	select_user_bank(userbank_0);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7ff fe4e 	bl	8002448 <select_user_bank>
	write_icm20948(B0_PWR_MGMT_1, DEVICE_RESET | 0x41);	// 0x41 is reset value
 80027ac:	21c1      	movs	r1, #193	; 0xc1
 80027ae:	2006      	movs	r0, #6
 80027b0:	f7ff fe92 	bl	80024d8 <write_icm20948>

	// SPI mode only
	select_user_bank(userbank_0);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7ff fe47 	bl	8002448 <select_user_bank>
	write_icm20948(B0_USER_CTRL, I2C_IF_DIS);
 80027ba:	2110      	movs	r1, #16
 80027bc:	2003      	movs	r0, #3
 80027be:	f7ff fe8b 	bl	80024d8 <write_icm20948>

	// Wake the chip and Recommended clock selection(CLKSEL = 1)
	select_user_bank(userbank_0);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7ff fe40 	bl	8002448 <select_user_bank>
	write_icm20948(B0_PWR_MGMT_1, WAKE | CLKSEL);
 80027c8:	2101      	movs	r1, #1
 80027ca:	2006      	movs	r0, #6
 80027cc:	f7ff fe84 	bl	80024d8 <write_icm20948>

	// ODR start time alignment
	select_user_bank(userbank_2);
 80027d0:	2020      	movs	r0, #32
 80027d2:	f7ff fe39 	bl	8002448 <select_user_bank>
	write_icm20948(B2_ODR_ALIGN_EN, ODR_START_TIME_ALIGNMENT_ENABLE);
 80027d6:	2101      	movs	r1, #1
 80027d8:	2009      	movs	r0, #9
 80027da:	f7ff fe7d 	bl	80024d8 <write_icm20948>

	// set full scale range
	set_gyro_full_scale(gy_fs);
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff1d 	bl	8002620 <set_gyro_full_scale>
	set_accel_full_scale(ac_fs);
 80027e6:	797b      	ldrb	r3, [r7, #5]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff61 	bl	80026b0 <set_accel_full_scale>

	// set odr
	set_gyro_odr(gy_odr);
 80027ee:	79bb      	ldrb	r3, [r7, #6]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ffa3 	bl	800273c <set_gyro_odr>
	set_accel_odr(ac_odr);
 80027f6:	793b      	ldrb	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ffb2 	bl	8002762 <set_accel_odr>


	printf("icm20948 initialized\n");
 80027fe:	4803      	ldr	r0, [pc, #12]	; (800280c <icm20948_init+0x84>)
 8002800:	f000 fa94 	bl	8002d2c <puts>
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}
 800280c:	0800361c 	.word	0x0800361c

08002810 <ak09916_init>:

// i2c : master(icm-20948) / slave(ak09916)
void ak09916_init(mag_opmode_e op_mode)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]
	// I2C Master Reset
	select_user_bank(userbank_0);
 800281a:	2000      	movs	r0, #0
 800281c:	f7ff fe14 	bl	8002448 <select_user_bank>
	write_icm20948(B0_USER_CTRL, I2C_MST_RST);
 8002820:	2102      	movs	r1, #2
 8002822:	2003      	movs	r0, #3
 8002824:	f7ff fe58 	bl	80024d8 <write_icm20948>

	// I2C Master Enable
	select_user_bank(userbank_0);
 8002828:	2000      	movs	r0, #0
 800282a:	f7ff fe0d 	bl	8002448 <select_user_bank>
	write_icm20948(B0_USER_CTRL, I2C_MST_EN);
 800282e:	2120      	movs	r1, #32
 8002830:	2003      	movs	r0, #3
 8002832:	f7ff fe51 	bl	80024d8 <write_icm20948>

	// I2C Master Clock Frequency
	select_user_bank(userbank_3);
 8002836:	2030      	movs	r0, #48	; 0x30
 8002838:	f7ff fe06 	bl	8002448 <select_user_bank>
	write_icm20948(B3_I2C_MST_CTRL, I2C_MST_CLK); // 345.6 kHz
 800283c:	2107      	movs	r1, #7
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff fe4a 	bl	80024d8 <write_icm20948>

	// I2C Slave Reset
	write_ak09916(MAG_CNTL3, 0x01);
 8002844:	2101      	movs	r1, #1
 8002846:	2032      	movs	r0, #50	; 0x32
 8002848:	f7ff fe92 	bl	8002570 <write_ak09916>
	
	// I2C Slave Operation Mode
	write_ak09916(MAG_CNTL2, op_mode);
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	4619      	mov	r1, r3
 8002850:	2031      	movs	r0, #49	; 0x31
 8002852:	f7ff fe8d 	bl	8002570 <write_ak09916>


	printf("ak09916 initialized\n");
 8002856:	4803      	ldr	r0, [pc, #12]	; (8002864 <ak09916_init+0x54>)
 8002858:	f000 fa68 	bl	8002d2c <puts>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	08003634 	.word	0x08003634

08002868 <read_gyro>:

// read gyro
void read_gyro(gyro_data_t* gyro_data, unit_e unit)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
	int16_t gyro_data_temp[3];

	select_user_bank(userbank_0);
 8002874:	2000      	movs	r0, #0
 8002876:	f7ff fde7 	bl	8002448 <select_user_bank>
	read_icm20948(B0_GYRO_XOUT_H, 6);
 800287a:	2106      	movs	r1, #6
 800287c:	2033      	movs	r0, #51	; 0x33
 800287e:	f7ff fe01 	bl	8002484 <read_icm20948>

	gyro_data_temp[0] = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
 8002882:	4b3e      	ldr	r3, [pc, #248]	; (800297c <read_gyro+0x114>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	b21a      	sxth	r2, r3
 800288a:	4b3c      	ldr	r3, [pc, #240]	; (800297c <read_gyro+0x114>)
 800288c:	785b      	ldrb	r3, [r3, #1]
 800288e:	b21b      	sxth	r3, r3
 8002890:	4313      	orrs	r3, r2
 8002892:	b21b      	sxth	r3, r3
 8002894:	813b      	strh	r3, [r7, #8]
	gyro_data_temp[1] = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
 8002896:	4b39      	ldr	r3, [pc, #228]	; (800297c <read_gyro+0x114>)
 8002898:	789b      	ldrb	r3, [r3, #2]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	b21a      	sxth	r2, r3
 800289e:	4b37      	ldr	r3, [pc, #220]	; (800297c <read_gyro+0x114>)
 80028a0:	78db      	ldrb	r3, [r3, #3]
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	817b      	strh	r3, [r7, #10]
	gyro_data_temp[2] = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
 80028aa:	4b34      	ldr	r3, [pc, #208]	; (800297c <read_gyro+0x114>)
 80028ac:	791b      	ldrb	r3, [r3, #4]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	b21a      	sxth	r2, r3
 80028b2:	4b32      	ldr	r3, [pc, #200]	; (800297c <read_gyro+0x114>)
 80028b4:	795b      	ldrb	r3, [r3, #5]
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	81bb      	strh	r3, [r7, #12]

	switch(unit)
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <read_gyro+0x62>
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d01c      	beq.n	8002902 <read_gyro+0x9a>
 80028c8:	e046      	b.n	8002958 <read_gyro+0xf0>
	{
		case unit_lsb :
			gyro_data->x = gyro_data_temp[0];
 80028ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	edc3 7a00 	vstr	s15, [r3]
			gyro_data->y = gyro_data_temp[1];
 80028dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	edc3 7a01 	vstr	s15, [r3, #4]
			gyro_data->z = gyro_data_temp[2];
 80028ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8002900:	e037      	b.n	8002972 <read_gyro+0x10a>
		
		case unit_dps : 
			gyro_data->x = (float)(gyro_data_temp[0] / gyro_typ);
 8002902:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800290e:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <read_gyro+0x118>)
 8002910:	ed93 7a00 	vldr	s14, [r3]
 8002914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	edc3 7a00 	vstr	s15, [r3]
			gyro_data->y = (float)(gyro_data_temp[1] / gyro_typ);
 800291e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <read_gyro+0x118>)
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	edc3 7a01 	vstr	s15, [r3, #4]
			gyro_data->z = (float)(gyro_data_temp[2] / gyro_typ);
 800293a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <read_gyro+0x118>)
 8002948:	ed93 7a00 	vldr	s14, [r3]
 800294c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8002956:	e00c      	b.n	8002972 <read_gyro+0x10a>

		default : 
			gyro_data->x = 0;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
			gyro_data->y = 0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
			gyro_data->z = 0;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
	}
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000009c 	.word	0x2000009c
 8002980:	2000012c 	.word	0x2000012c

08002984 <read_accel>:


void read_accel(accel_data_t* accel_data, unit_e unit)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
	int16_t accel_data_temp[3];

	select_user_bank(userbank_0);
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff fd59 	bl	8002448 <select_user_bank>
	read_icm20948(B0_ACCEL_XOUT_H, 6);
 8002996:	2106      	movs	r1, #6
 8002998:	202d      	movs	r0, #45	; 0x2d
 800299a:	f7ff fd73 	bl	8002484 <read_icm20948>
	
	accel_data_temp[0] = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
 800299e:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <read_accel+0x114>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b21a      	sxth	r2, r3
 80029a6:	4b3c      	ldr	r3, [pc, #240]	; (8002a98 <read_accel+0x114>)
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	813b      	strh	r3, [r7, #8]
	accel_data_temp[1] = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <read_accel+0x114>)
 80029b4:	789b      	ldrb	r3, [r3, #2]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <read_accel+0x114>)
 80029bc:	78db      	ldrb	r3, [r3, #3]
 80029be:	b21b      	sxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b21b      	sxth	r3, r3
 80029c4:	817b      	strh	r3, [r7, #10]
	accel_data_temp[2] = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <read_accel+0x114>)
 80029c8:	791b      	ldrb	r3, [r3, #4]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <read_accel+0x114>)
 80029d0:	795b      	ldrb	r3, [r3, #5]
 80029d2:	b21b      	sxth	r3, r3
 80029d4:	4313      	orrs	r3, r2
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	81bb      	strh	r3, [r7, #12]

	switch(unit)
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <read_accel+0x62>
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d01c      	beq.n	8002a1e <read_accel+0x9a>
 80029e4:	e046      	b.n	8002a74 <read_accel+0xf0>
	{
		case unit_lsb :
			accel_data->x = accel_data_temp[0];
 80029e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	edc3 7a00 	vstr	s15, [r3]
			accel_data->y = accel_data_temp[1];
 80029f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	edc3 7a01 	vstr	s15, [r3, #4]
			accel_data->z = accel_data_temp[2];
 8002a0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8002a1c:	e037      	b.n	8002a8e <read_accel+0x10a>
		
		case unit_g : 
			accel_data->x = (float)(accel_data_temp[0] / accel_typ);
 8002a1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <read_accel+0x118>)
 8002a2c:	ed93 7a00 	vldr	s14, [r3]
 8002a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	edc3 7a00 	vstr	s15, [r3]
			accel_data->y = (float)(accel_data_temp[1] / accel_typ);
 8002a3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <read_accel+0x118>)
 8002a48:	ed93 7a00 	vldr	s14, [r3]
 8002a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	edc3 7a01 	vstr	s15, [r3, #4]
			accel_data->z = (float)(accel_data_temp[2] / accel_typ);
 8002a56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <read_accel+0x118>)
 8002a64:	ed93 7a00 	vldr	s14, [r3]
 8002a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8002a72:	e00c      	b.n	8002a8e <read_accel+0x10a>

		default :
			accel_data->x = 0;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
			accel_data->y = 0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	605a      	str	r2, [r3, #4]
			accel_data->z = 0;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
	}
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	2000009c 	.word	0x2000009c
 8002a9c:	20000130 	.word	0x20000130

08002aa0 <read_mag>:


// read mag
void read_mag(mag_data_t* mag_data, unit_e unit)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	70fb      	strb	r3, [r7, #3]
	int16_t mag_data_temp[3] = {0};
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	809a      	strh	r2, [r3, #4]

	// Read status1(ST1) register
	read_ak09916(MAG_ST1,1);
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	2010      	movs	r0, #16
 8002aba:	f7ff fd31 	bl	8002520 <read_ak09916>

	// check data is ready
	if((rx_buffer[0] & 0x01) == 1)
 8002abe:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <read_mag+0x144>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8086 	beq.w	8002bd8 <read_mag+0x138>
	{ 
		// Read Measurement data register(HXL to HZH)
		read_ak09916(MAG_HXL, 6);
 8002acc:	2106      	movs	r1, #6
 8002ace:	2011      	movs	r0, #17
 8002ad0:	f7ff fd26 	bl	8002520 <read_ak09916>
		mag_data_temp[0] = (int16_t)(rx_buffer[1] << 8 | rx_buffer[0]);
 8002ad4:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <read_mag+0x144>)
 8002ad6:	785b      	ldrb	r3, [r3, #1]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <read_mag+0x144>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	b21b      	sxth	r3, r3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b21b      	sxth	r3, r3
 8002ae6:	813b      	strh	r3, [r7, #8]
		mag_data_temp[1] = (int16_t)(rx_buffer[3] << 8 | rx_buffer[2]);
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <read_mag+0x144>)
 8002aea:	78db      	ldrb	r3, [r3, #3]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	b21a      	sxth	r2, r3
 8002af0:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <read_mag+0x144>)
 8002af2:	789b      	ldrb	r3, [r3, #2]
 8002af4:	b21b      	sxth	r3, r3
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	817b      	strh	r3, [r7, #10]
		mag_data_temp[2] = (int16_t)(rx_buffer[5] << 8 | rx_buffer[4]);
 8002afc:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <read_mag+0x144>)
 8002afe:	795b      	ldrb	r3, [r3, #5]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	b21a      	sxth	r2, r3
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <read_mag+0x144>)
 8002b06:	791b      	ldrb	r3, [r3, #4]
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	b21b      	sxth	r3, r3
 8002b0e:	81bb      	strh	r3, [r7, #12]

		// Read status2(ST2) register
		read_ak09916(MAG_ST2, 1);
 8002b10:	2101      	movs	r1, #1
 8002b12:	2018      	movs	r0, #24
 8002b14:	f7ff fd04 	bl	8002520 <read_ak09916>
		if((rx_buffer[0] & 0x08) == 0x00) // not overflow
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <read_mag+0x144>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d159      	bne.n	8002bd8 <read_mag+0x138>
		{
			switch(unit)
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <read_mag+0x90>
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d01c      	beq.n	8002b68 <read_mag+0xc8>
 8002b2e:	e046      	b.n	8002bbe <read_mag+0x11e>
			{
				case unit_lsb :
					mag_data->x = mag_data_temp[0];
 8002b30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	edc3 7a00 	vstr	s15, [r3]
					mag_data->y = mag_data_temp[1];
 8002b42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	edc3 7a01 	vstr	s15, [r3, #4]
					mag_data->z = mag_data_temp[2];
 8002b54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 8002b66:	e038      	b.n	8002bda <read_mag+0x13a>
				
				case unit_uT : 
					mag_data->x = (float)(mag_data_temp[0] / mag_typ);
 8002b68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <read_mag+0x148>)
 8002b76:	ed93 7a00 	vldr	s14, [r3]
 8002b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	edc3 7a00 	vstr	s15, [r3]
					mag_data->y = (float)(mag_data_temp[1] / mag_typ);
 8002b84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <read_mag+0x148>)
 8002b92:	ed93 7a00 	vldr	s14, [r3]
 8002b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	edc3 7a01 	vstr	s15, [r3, #4]
					mag_data->z = (float)(mag_data_temp[2] / mag_typ);
 8002ba0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ba4:	ee07 3a90 	vmov	s15, r3
 8002ba8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <read_mag+0x148>)
 8002bae:	ed93 7a00 	vldr	s14, [r3]
 8002bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 8002bbc:	e00d      	b.n	8002bda <read_mag+0x13a>

				default : 
					mag_data->x = 0;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
					mag_data->y = 0;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	605a      	str	r2, [r3, #4]
					mag_data->z = 0;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]

		}

	}

}
 8002bd6:	e000      	b.n	8002bda <read_mag+0x13a>
		}
 8002bd8:	bf00      	nop
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000009c 	.word	0x2000009c
 8002be8:	2000000c 	.word	0x2000000c

08002bec <__errno>:
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <__errno+0x8>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000010 	.word	0x20000010

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4d0d      	ldr	r5, [pc, #52]	; (8002c30 <__libc_init_array+0x38>)
 8002bfc:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002bfe:	1b64      	subs	r4, r4, r5
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	2600      	movs	r6, #0
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	4d0b      	ldr	r5, [pc, #44]	; (8002c38 <__libc_init_array+0x40>)
 8002c0a:	4c0c      	ldr	r4, [pc, #48]	; (8002c3c <__libc_init_array+0x44>)
 8002c0c:	f000 fce6 	bl	80035dc <_init>
 8002c10:	1b64      	subs	r4, r4, r5
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	2600      	movs	r6, #0
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	080036c4 	.word	0x080036c4
 8002c34:	080036c4 	.word	0x080036c4
 8002c38:	080036c4 	.word	0x080036c4
 8002c3c:	080036c8 	.word	0x080036c8

08002c40 <memset>:
 8002c40:	4402      	add	r2, r0
 8002c42:	4603      	mov	r3, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <_puts_r>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	460e      	mov	r6, r1
 8002c54:	4605      	mov	r5, r0
 8002c56:	b118      	cbz	r0, 8002c60 <_puts_r+0x10>
 8002c58:	6983      	ldr	r3, [r0, #24]
 8002c5a:	b90b      	cbnz	r3, 8002c60 <_puts_r+0x10>
 8002c5c:	f000 fa48 	bl	80030f0 <__sinit>
 8002c60:	69ab      	ldr	r3, [r5, #24]
 8002c62:	68ac      	ldr	r4, [r5, #8]
 8002c64:	b913      	cbnz	r3, 8002c6c <_puts_r+0x1c>
 8002c66:	4628      	mov	r0, r5
 8002c68:	f000 fa42 	bl	80030f0 <__sinit>
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <_puts_r+0xd0>)
 8002c6e:	429c      	cmp	r4, r3
 8002c70:	d120      	bne.n	8002cb4 <_puts_r+0x64>
 8002c72:	686c      	ldr	r4, [r5, #4]
 8002c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c76:	07db      	lsls	r3, r3, #31
 8002c78:	d405      	bmi.n	8002c86 <_puts_r+0x36>
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	0598      	lsls	r0, r3, #22
 8002c7e:	d402      	bmi.n	8002c86 <_puts_r+0x36>
 8002c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c82:	f000 fad3 	bl	800322c <__retarget_lock_acquire_recursive>
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	0719      	lsls	r1, r3, #28
 8002c8a:	d51d      	bpl.n	8002cc8 <_puts_r+0x78>
 8002c8c:	6923      	ldr	r3, [r4, #16]
 8002c8e:	b1db      	cbz	r3, 8002cc8 <_puts_r+0x78>
 8002c90:	3e01      	subs	r6, #1
 8002c92:	68a3      	ldr	r3, [r4, #8]
 8002c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60a3      	str	r3, [r4, #8]
 8002c9c:	bb39      	cbnz	r1, 8002cee <_puts_r+0x9e>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da38      	bge.n	8002d14 <_puts_r+0xc4>
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	210a      	movs	r1, #10
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f000 f848 	bl	8002d3c <__swbuf_r>
 8002cac:	3001      	adds	r0, #1
 8002cae:	d011      	beq.n	8002cd4 <_puts_r+0x84>
 8002cb0:	250a      	movs	r5, #10
 8002cb2:	e011      	b.n	8002cd8 <_puts_r+0x88>
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <_puts_r+0xd4>)
 8002cb6:	429c      	cmp	r4, r3
 8002cb8:	d101      	bne.n	8002cbe <_puts_r+0x6e>
 8002cba:	68ac      	ldr	r4, [r5, #8]
 8002cbc:	e7da      	b.n	8002c74 <_puts_r+0x24>
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <_puts_r+0xd8>)
 8002cc0:	429c      	cmp	r4, r3
 8002cc2:	bf08      	it	eq
 8002cc4:	68ec      	ldreq	r4, [r5, #12]
 8002cc6:	e7d5      	b.n	8002c74 <_puts_r+0x24>
 8002cc8:	4621      	mov	r1, r4
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f000 f888 	bl	8002de0 <__swsetup_r>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d0dd      	beq.n	8002c90 <_puts_r+0x40>
 8002cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8002cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cda:	07da      	lsls	r2, r3, #31
 8002cdc:	d405      	bmi.n	8002cea <_puts_r+0x9a>
 8002cde:	89a3      	ldrh	r3, [r4, #12]
 8002ce0:	059b      	lsls	r3, r3, #22
 8002ce2:	d402      	bmi.n	8002cea <_puts_r+0x9a>
 8002ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ce6:	f000 faa2 	bl	800322e <__retarget_lock_release_recursive>
 8002cea:	4628      	mov	r0, r5
 8002cec:	bd70      	pop	{r4, r5, r6, pc}
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da04      	bge.n	8002cfc <_puts_r+0xac>
 8002cf2:	69a2      	ldr	r2, [r4, #24]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	dc06      	bgt.n	8002d06 <_puts_r+0xb6>
 8002cf8:	290a      	cmp	r1, #10
 8002cfa:	d004      	beq.n	8002d06 <_puts_r+0xb6>
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	6022      	str	r2, [r4, #0]
 8002d02:	7019      	strb	r1, [r3, #0]
 8002d04:	e7c5      	b.n	8002c92 <_puts_r+0x42>
 8002d06:	4622      	mov	r2, r4
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f000 f817 	bl	8002d3c <__swbuf_r>
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d1bf      	bne.n	8002c92 <_puts_r+0x42>
 8002d12:	e7df      	b.n	8002cd4 <_puts_r+0x84>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	250a      	movs	r5, #10
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	6022      	str	r2, [r4, #0]
 8002d1c:	701d      	strb	r5, [r3, #0]
 8002d1e:	e7db      	b.n	8002cd8 <_puts_r+0x88>
 8002d20:	0800367c 	.word	0x0800367c
 8002d24:	0800369c 	.word	0x0800369c
 8002d28:	0800365c 	.word	0x0800365c

08002d2c <puts>:
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <puts+0xc>)
 8002d2e:	4601      	mov	r1, r0
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	f7ff bf8d 	b.w	8002c50 <_puts_r>
 8002d36:	bf00      	nop
 8002d38:	20000010 	.word	0x20000010

08002d3c <__swbuf_r>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	460e      	mov	r6, r1
 8002d40:	4614      	mov	r4, r2
 8002d42:	4605      	mov	r5, r0
 8002d44:	b118      	cbz	r0, 8002d4e <__swbuf_r+0x12>
 8002d46:	6983      	ldr	r3, [r0, #24]
 8002d48:	b90b      	cbnz	r3, 8002d4e <__swbuf_r+0x12>
 8002d4a:	f000 f9d1 	bl	80030f0 <__sinit>
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <__swbuf_r+0x98>)
 8002d50:	429c      	cmp	r4, r3
 8002d52:	d12b      	bne.n	8002dac <__swbuf_r+0x70>
 8002d54:	686c      	ldr	r4, [r5, #4]
 8002d56:	69a3      	ldr	r3, [r4, #24]
 8002d58:	60a3      	str	r3, [r4, #8]
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	071a      	lsls	r2, r3, #28
 8002d5e:	d52f      	bpl.n	8002dc0 <__swbuf_r+0x84>
 8002d60:	6923      	ldr	r3, [r4, #16]
 8002d62:	b36b      	cbz	r3, 8002dc0 <__swbuf_r+0x84>
 8002d64:	6923      	ldr	r3, [r4, #16]
 8002d66:	6820      	ldr	r0, [r4, #0]
 8002d68:	1ac0      	subs	r0, r0, r3
 8002d6a:	6963      	ldr	r3, [r4, #20]
 8002d6c:	b2f6      	uxtb	r6, r6
 8002d6e:	4283      	cmp	r3, r0
 8002d70:	4637      	mov	r7, r6
 8002d72:	dc04      	bgt.n	8002d7e <__swbuf_r+0x42>
 8002d74:	4621      	mov	r1, r4
 8002d76:	4628      	mov	r0, r5
 8002d78:	f000 f926 	bl	8002fc8 <_fflush_r>
 8002d7c:	bb30      	cbnz	r0, 8002dcc <__swbuf_r+0x90>
 8002d7e:	68a3      	ldr	r3, [r4, #8]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	60a3      	str	r3, [r4, #8]
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	6022      	str	r2, [r4, #0]
 8002d8a:	701e      	strb	r6, [r3, #0]
 8002d8c:	6963      	ldr	r3, [r4, #20]
 8002d8e:	3001      	adds	r0, #1
 8002d90:	4283      	cmp	r3, r0
 8002d92:	d004      	beq.n	8002d9e <__swbuf_r+0x62>
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	07db      	lsls	r3, r3, #31
 8002d98:	d506      	bpl.n	8002da8 <__swbuf_r+0x6c>
 8002d9a:	2e0a      	cmp	r6, #10
 8002d9c:	d104      	bne.n	8002da8 <__swbuf_r+0x6c>
 8002d9e:	4621      	mov	r1, r4
 8002da0:	4628      	mov	r0, r5
 8002da2:	f000 f911 	bl	8002fc8 <_fflush_r>
 8002da6:	b988      	cbnz	r0, 8002dcc <__swbuf_r+0x90>
 8002da8:	4638      	mov	r0, r7
 8002daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <__swbuf_r+0x9c>)
 8002dae:	429c      	cmp	r4, r3
 8002db0:	d101      	bne.n	8002db6 <__swbuf_r+0x7a>
 8002db2:	68ac      	ldr	r4, [r5, #8]
 8002db4:	e7cf      	b.n	8002d56 <__swbuf_r+0x1a>
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <__swbuf_r+0xa0>)
 8002db8:	429c      	cmp	r4, r3
 8002dba:	bf08      	it	eq
 8002dbc:	68ec      	ldreq	r4, [r5, #12]
 8002dbe:	e7ca      	b.n	8002d56 <__swbuf_r+0x1a>
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f000 f80c 	bl	8002de0 <__swsetup_r>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d0cb      	beq.n	8002d64 <__swbuf_r+0x28>
 8002dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8002dd0:	e7ea      	b.n	8002da8 <__swbuf_r+0x6c>
 8002dd2:	bf00      	nop
 8002dd4:	0800367c 	.word	0x0800367c
 8002dd8:	0800369c 	.word	0x0800369c
 8002ddc:	0800365c 	.word	0x0800365c

08002de0 <__swsetup_r>:
 8002de0:	4b32      	ldr	r3, [pc, #200]	; (8002eac <__swsetup_r+0xcc>)
 8002de2:	b570      	push	{r4, r5, r6, lr}
 8002de4:	681d      	ldr	r5, [r3, #0]
 8002de6:	4606      	mov	r6, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	b125      	cbz	r5, 8002df6 <__swsetup_r+0x16>
 8002dec:	69ab      	ldr	r3, [r5, #24]
 8002dee:	b913      	cbnz	r3, 8002df6 <__swsetup_r+0x16>
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 f97d 	bl	80030f0 <__sinit>
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <__swsetup_r+0xd0>)
 8002df8:	429c      	cmp	r4, r3
 8002dfa:	d10f      	bne.n	8002e1c <__swsetup_r+0x3c>
 8002dfc:	686c      	ldr	r4, [r5, #4]
 8002dfe:	89a3      	ldrh	r3, [r4, #12]
 8002e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e04:	0719      	lsls	r1, r3, #28
 8002e06:	d42c      	bmi.n	8002e62 <__swsetup_r+0x82>
 8002e08:	06dd      	lsls	r5, r3, #27
 8002e0a:	d411      	bmi.n	8002e30 <__swsetup_r+0x50>
 8002e0c:	2309      	movs	r3, #9
 8002e0e:	6033      	str	r3, [r6, #0]
 8002e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e14:	81a3      	strh	r3, [r4, #12]
 8002e16:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1a:	e03e      	b.n	8002e9a <__swsetup_r+0xba>
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <__swsetup_r+0xd4>)
 8002e1e:	429c      	cmp	r4, r3
 8002e20:	d101      	bne.n	8002e26 <__swsetup_r+0x46>
 8002e22:	68ac      	ldr	r4, [r5, #8]
 8002e24:	e7eb      	b.n	8002dfe <__swsetup_r+0x1e>
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <__swsetup_r+0xd8>)
 8002e28:	429c      	cmp	r4, r3
 8002e2a:	bf08      	it	eq
 8002e2c:	68ec      	ldreq	r4, [r5, #12]
 8002e2e:	e7e6      	b.n	8002dfe <__swsetup_r+0x1e>
 8002e30:	0758      	lsls	r0, r3, #29
 8002e32:	d512      	bpl.n	8002e5a <__swsetup_r+0x7a>
 8002e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e36:	b141      	cbz	r1, 8002e4a <__swsetup_r+0x6a>
 8002e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e3c:	4299      	cmp	r1, r3
 8002e3e:	d002      	beq.n	8002e46 <__swsetup_r+0x66>
 8002e40:	4630      	mov	r0, r6
 8002e42:	f000 fa59 	bl	80032f8 <_free_r>
 8002e46:	2300      	movs	r3, #0
 8002e48:	6363      	str	r3, [r4, #52]	; 0x34
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e50:	81a3      	strh	r3, [r4, #12]
 8002e52:	2300      	movs	r3, #0
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	6923      	ldr	r3, [r4, #16]
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	f043 0308 	orr.w	r3, r3, #8
 8002e60:	81a3      	strh	r3, [r4, #12]
 8002e62:	6923      	ldr	r3, [r4, #16]
 8002e64:	b94b      	cbnz	r3, 8002e7a <__swsetup_r+0x9a>
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d003      	beq.n	8002e7a <__swsetup_r+0x9a>
 8002e72:	4621      	mov	r1, r4
 8002e74:	4630      	mov	r0, r6
 8002e76:	f000 f9ff 	bl	8003278 <__smakebuf_r>
 8002e7a:	89a0      	ldrh	r0, [r4, #12]
 8002e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e80:	f010 0301 	ands.w	r3, r0, #1
 8002e84:	d00a      	beq.n	8002e9c <__swsetup_r+0xbc>
 8002e86:	2300      	movs	r3, #0
 8002e88:	60a3      	str	r3, [r4, #8]
 8002e8a:	6963      	ldr	r3, [r4, #20]
 8002e8c:	425b      	negs	r3, r3
 8002e8e:	61a3      	str	r3, [r4, #24]
 8002e90:	6923      	ldr	r3, [r4, #16]
 8002e92:	b943      	cbnz	r3, 8002ea6 <__swsetup_r+0xc6>
 8002e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e98:	d1ba      	bne.n	8002e10 <__swsetup_r+0x30>
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	0781      	lsls	r1, r0, #30
 8002e9e:	bf58      	it	pl
 8002ea0:	6963      	ldrpl	r3, [r4, #20]
 8002ea2:	60a3      	str	r3, [r4, #8]
 8002ea4:	e7f4      	b.n	8002e90 <__swsetup_r+0xb0>
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	e7f7      	b.n	8002e9a <__swsetup_r+0xba>
 8002eaa:	bf00      	nop
 8002eac:	20000010 	.word	0x20000010
 8002eb0:	0800367c 	.word	0x0800367c
 8002eb4:	0800369c 	.word	0x0800369c
 8002eb8:	0800365c 	.word	0x0800365c

08002ebc <__sflush_r>:
 8002ebc:	898a      	ldrh	r2, [r1, #12]
 8002ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec2:	4605      	mov	r5, r0
 8002ec4:	0710      	lsls	r0, r2, #28
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	d458      	bmi.n	8002f7c <__sflush_r+0xc0>
 8002eca:	684b      	ldr	r3, [r1, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dc05      	bgt.n	8002edc <__sflush_r+0x20>
 8002ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	dc02      	bgt.n	8002edc <__sflush_r+0x20>
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ede:	2e00      	cmp	r6, #0
 8002ee0:	d0f9      	beq.n	8002ed6 <__sflush_r+0x1a>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ee8:	682f      	ldr	r7, [r5, #0]
 8002eea:	602b      	str	r3, [r5, #0]
 8002eec:	d032      	beq.n	8002f54 <__sflush_r+0x98>
 8002eee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ef0:	89a3      	ldrh	r3, [r4, #12]
 8002ef2:	075a      	lsls	r2, r3, #29
 8002ef4:	d505      	bpl.n	8002f02 <__sflush_r+0x46>
 8002ef6:	6863      	ldr	r3, [r4, #4]
 8002ef8:	1ac0      	subs	r0, r0, r3
 8002efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002efc:	b10b      	cbz	r3, 8002f02 <__sflush_r+0x46>
 8002efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f00:	1ac0      	subs	r0, r0, r3
 8002f02:	2300      	movs	r3, #0
 8002f04:	4602      	mov	r2, r0
 8002f06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f08:	6a21      	ldr	r1, [r4, #32]
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	47b0      	blx	r6
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	89a3      	ldrh	r3, [r4, #12]
 8002f12:	d106      	bne.n	8002f22 <__sflush_r+0x66>
 8002f14:	6829      	ldr	r1, [r5, #0]
 8002f16:	291d      	cmp	r1, #29
 8002f18:	d82c      	bhi.n	8002f74 <__sflush_r+0xb8>
 8002f1a:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <__sflush_r+0x108>)
 8002f1c:	40ca      	lsrs	r2, r1
 8002f1e:	07d6      	lsls	r6, r2, #31
 8002f20:	d528      	bpl.n	8002f74 <__sflush_r+0xb8>
 8002f22:	2200      	movs	r2, #0
 8002f24:	6062      	str	r2, [r4, #4]
 8002f26:	04d9      	lsls	r1, r3, #19
 8002f28:	6922      	ldr	r2, [r4, #16]
 8002f2a:	6022      	str	r2, [r4, #0]
 8002f2c:	d504      	bpl.n	8002f38 <__sflush_r+0x7c>
 8002f2e:	1c42      	adds	r2, r0, #1
 8002f30:	d101      	bne.n	8002f36 <__sflush_r+0x7a>
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	b903      	cbnz	r3, 8002f38 <__sflush_r+0x7c>
 8002f36:	6560      	str	r0, [r4, #84]	; 0x54
 8002f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f3a:	602f      	str	r7, [r5, #0]
 8002f3c:	2900      	cmp	r1, #0
 8002f3e:	d0ca      	beq.n	8002ed6 <__sflush_r+0x1a>
 8002f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f44:	4299      	cmp	r1, r3
 8002f46:	d002      	beq.n	8002f4e <__sflush_r+0x92>
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f000 f9d5 	bl	80032f8 <_free_r>
 8002f4e:	2000      	movs	r0, #0
 8002f50:	6360      	str	r0, [r4, #52]	; 0x34
 8002f52:	e7c1      	b.n	8002ed8 <__sflush_r+0x1c>
 8002f54:	6a21      	ldr	r1, [r4, #32]
 8002f56:	2301      	movs	r3, #1
 8002f58:	4628      	mov	r0, r5
 8002f5a:	47b0      	blx	r6
 8002f5c:	1c41      	adds	r1, r0, #1
 8002f5e:	d1c7      	bne.n	8002ef0 <__sflush_r+0x34>
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0c4      	beq.n	8002ef0 <__sflush_r+0x34>
 8002f66:	2b1d      	cmp	r3, #29
 8002f68:	d001      	beq.n	8002f6e <__sflush_r+0xb2>
 8002f6a:	2b16      	cmp	r3, #22
 8002f6c:	d101      	bne.n	8002f72 <__sflush_r+0xb6>
 8002f6e:	602f      	str	r7, [r5, #0]
 8002f70:	e7b1      	b.n	8002ed6 <__sflush_r+0x1a>
 8002f72:	89a3      	ldrh	r3, [r4, #12]
 8002f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	e7ad      	b.n	8002ed8 <__sflush_r+0x1c>
 8002f7c:	690f      	ldr	r7, [r1, #16]
 8002f7e:	2f00      	cmp	r7, #0
 8002f80:	d0a9      	beq.n	8002ed6 <__sflush_r+0x1a>
 8002f82:	0793      	lsls	r3, r2, #30
 8002f84:	680e      	ldr	r6, [r1, #0]
 8002f86:	bf08      	it	eq
 8002f88:	694b      	ldreq	r3, [r1, #20]
 8002f8a:	600f      	str	r7, [r1, #0]
 8002f8c:	bf18      	it	ne
 8002f8e:	2300      	movne	r3, #0
 8002f90:	eba6 0807 	sub.w	r8, r6, r7
 8002f94:	608b      	str	r3, [r1, #8]
 8002f96:	f1b8 0f00 	cmp.w	r8, #0
 8002f9a:	dd9c      	ble.n	8002ed6 <__sflush_r+0x1a>
 8002f9c:	6a21      	ldr	r1, [r4, #32]
 8002f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fa0:	4643      	mov	r3, r8
 8002fa2:	463a      	mov	r2, r7
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	47b0      	blx	r6
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	dc06      	bgt.n	8002fba <__sflush_r+0xfe>
 8002fac:	89a3      	ldrh	r3, [r4, #12]
 8002fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb2:	81a3      	strh	r3, [r4, #12]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	e78e      	b.n	8002ed8 <__sflush_r+0x1c>
 8002fba:	4407      	add	r7, r0
 8002fbc:	eba8 0800 	sub.w	r8, r8, r0
 8002fc0:	e7e9      	b.n	8002f96 <__sflush_r+0xda>
 8002fc2:	bf00      	nop
 8002fc4:	20400001 	.word	0x20400001

08002fc8 <_fflush_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	690b      	ldr	r3, [r1, #16]
 8002fcc:	4605      	mov	r5, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	b913      	cbnz	r3, 8002fd8 <_fflush_r+0x10>
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	b118      	cbz	r0, 8002fe2 <_fflush_r+0x1a>
 8002fda:	6983      	ldr	r3, [r0, #24]
 8002fdc:	b90b      	cbnz	r3, 8002fe2 <_fflush_r+0x1a>
 8002fde:	f000 f887 	bl	80030f0 <__sinit>
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <_fflush_r+0x6c>)
 8002fe4:	429c      	cmp	r4, r3
 8002fe6:	d11b      	bne.n	8003020 <_fflush_r+0x58>
 8002fe8:	686c      	ldr	r4, [r5, #4]
 8002fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ef      	beq.n	8002fd2 <_fflush_r+0xa>
 8002ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ff4:	07d0      	lsls	r0, r2, #31
 8002ff6:	d404      	bmi.n	8003002 <_fflush_r+0x3a>
 8002ff8:	0599      	lsls	r1, r3, #22
 8002ffa:	d402      	bmi.n	8003002 <_fflush_r+0x3a>
 8002ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ffe:	f000 f915 	bl	800322c <__retarget_lock_acquire_recursive>
 8003002:	4628      	mov	r0, r5
 8003004:	4621      	mov	r1, r4
 8003006:	f7ff ff59 	bl	8002ebc <__sflush_r>
 800300a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800300c:	07da      	lsls	r2, r3, #31
 800300e:	4605      	mov	r5, r0
 8003010:	d4e0      	bmi.n	8002fd4 <_fflush_r+0xc>
 8003012:	89a3      	ldrh	r3, [r4, #12]
 8003014:	059b      	lsls	r3, r3, #22
 8003016:	d4dd      	bmi.n	8002fd4 <_fflush_r+0xc>
 8003018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800301a:	f000 f908 	bl	800322e <__retarget_lock_release_recursive>
 800301e:	e7d9      	b.n	8002fd4 <_fflush_r+0xc>
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <_fflush_r+0x70>)
 8003022:	429c      	cmp	r4, r3
 8003024:	d101      	bne.n	800302a <_fflush_r+0x62>
 8003026:	68ac      	ldr	r4, [r5, #8]
 8003028:	e7df      	b.n	8002fea <_fflush_r+0x22>
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <_fflush_r+0x74>)
 800302c:	429c      	cmp	r4, r3
 800302e:	bf08      	it	eq
 8003030:	68ec      	ldreq	r4, [r5, #12]
 8003032:	e7da      	b.n	8002fea <_fflush_r+0x22>
 8003034:	0800367c 	.word	0x0800367c
 8003038:	0800369c 	.word	0x0800369c
 800303c:	0800365c 	.word	0x0800365c

08003040 <std>:
 8003040:	2300      	movs	r3, #0
 8003042:	b510      	push	{r4, lr}
 8003044:	4604      	mov	r4, r0
 8003046:	e9c0 3300 	strd	r3, r3, [r0]
 800304a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800304e:	6083      	str	r3, [r0, #8]
 8003050:	8181      	strh	r1, [r0, #12]
 8003052:	6643      	str	r3, [r0, #100]	; 0x64
 8003054:	81c2      	strh	r2, [r0, #14]
 8003056:	6183      	str	r3, [r0, #24]
 8003058:	4619      	mov	r1, r3
 800305a:	2208      	movs	r2, #8
 800305c:	305c      	adds	r0, #92	; 0x5c
 800305e:	f7ff fdef 	bl	8002c40 <memset>
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <std+0x38>)
 8003064:	6263      	str	r3, [r4, #36]	; 0x24
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <std+0x3c>)
 8003068:	62a3      	str	r3, [r4, #40]	; 0x28
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <std+0x40>)
 800306c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <std+0x44>)
 8003070:	6224      	str	r4, [r4, #32]
 8003072:	6323      	str	r3, [r4, #48]	; 0x30
 8003074:	bd10      	pop	{r4, pc}
 8003076:	bf00      	nop
 8003078:	0800346d 	.word	0x0800346d
 800307c:	0800348f 	.word	0x0800348f
 8003080:	080034c7 	.word	0x080034c7
 8003084:	080034eb 	.word	0x080034eb

08003088 <_cleanup_r>:
 8003088:	4901      	ldr	r1, [pc, #4]	; (8003090 <_cleanup_r+0x8>)
 800308a:	f000 b8af 	b.w	80031ec <_fwalk_reent>
 800308e:	bf00      	nop
 8003090:	08002fc9 	.word	0x08002fc9

08003094 <__sfmoreglue>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	1e4a      	subs	r2, r1, #1
 8003098:	2568      	movs	r5, #104	; 0x68
 800309a:	4355      	muls	r5, r2
 800309c:	460e      	mov	r6, r1
 800309e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030a2:	f000 f979 	bl	8003398 <_malloc_r>
 80030a6:	4604      	mov	r4, r0
 80030a8:	b140      	cbz	r0, 80030bc <__sfmoreglue+0x28>
 80030aa:	2100      	movs	r1, #0
 80030ac:	e9c0 1600 	strd	r1, r6, [r0]
 80030b0:	300c      	adds	r0, #12
 80030b2:	60a0      	str	r0, [r4, #8]
 80030b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030b8:	f7ff fdc2 	bl	8002c40 <memset>
 80030bc:	4620      	mov	r0, r4
 80030be:	bd70      	pop	{r4, r5, r6, pc}

080030c0 <__sfp_lock_acquire>:
 80030c0:	4801      	ldr	r0, [pc, #4]	; (80030c8 <__sfp_lock_acquire+0x8>)
 80030c2:	f000 b8b3 	b.w	800322c <__retarget_lock_acquire_recursive>
 80030c6:	bf00      	nop
 80030c8:	2000013c 	.word	0x2000013c

080030cc <__sfp_lock_release>:
 80030cc:	4801      	ldr	r0, [pc, #4]	; (80030d4 <__sfp_lock_release+0x8>)
 80030ce:	f000 b8ae 	b.w	800322e <__retarget_lock_release_recursive>
 80030d2:	bf00      	nop
 80030d4:	2000013c 	.word	0x2000013c

080030d8 <__sinit_lock_acquire>:
 80030d8:	4801      	ldr	r0, [pc, #4]	; (80030e0 <__sinit_lock_acquire+0x8>)
 80030da:	f000 b8a7 	b.w	800322c <__retarget_lock_acquire_recursive>
 80030de:	bf00      	nop
 80030e0:	20000137 	.word	0x20000137

080030e4 <__sinit_lock_release>:
 80030e4:	4801      	ldr	r0, [pc, #4]	; (80030ec <__sinit_lock_release+0x8>)
 80030e6:	f000 b8a2 	b.w	800322e <__retarget_lock_release_recursive>
 80030ea:	bf00      	nop
 80030ec:	20000137 	.word	0x20000137

080030f0 <__sinit>:
 80030f0:	b510      	push	{r4, lr}
 80030f2:	4604      	mov	r4, r0
 80030f4:	f7ff fff0 	bl	80030d8 <__sinit_lock_acquire>
 80030f8:	69a3      	ldr	r3, [r4, #24]
 80030fa:	b11b      	cbz	r3, 8003104 <__sinit+0x14>
 80030fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003100:	f7ff bff0 	b.w	80030e4 <__sinit_lock_release>
 8003104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003108:	6523      	str	r3, [r4, #80]	; 0x50
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <__sinit+0x68>)
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <__sinit+0x6c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	62a2      	str	r2, [r4, #40]	; 0x28
 8003112:	42a3      	cmp	r3, r4
 8003114:	bf04      	itt	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	61a3      	streq	r3, [r4, #24]
 800311a:	4620      	mov	r0, r4
 800311c:	f000 f820 	bl	8003160 <__sfp>
 8003120:	6060      	str	r0, [r4, #4]
 8003122:	4620      	mov	r0, r4
 8003124:	f000 f81c 	bl	8003160 <__sfp>
 8003128:	60a0      	str	r0, [r4, #8]
 800312a:	4620      	mov	r0, r4
 800312c:	f000 f818 	bl	8003160 <__sfp>
 8003130:	2200      	movs	r2, #0
 8003132:	60e0      	str	r0, [r4, #12]
 8003134:	2104      	movs	r1, #4
 8003136:	6860      	ldr	r0, [r4, #4]
 8003138:	f7ff ff82 	bl	8003040 <std>
 800313c:	68a0      	ldr	r0, [r4, #8]
 800313e:	2201      	movs	r2, #1
 8003140:	2109      	movs	r1, #9
 8003142:	f7ff ff7d 	bl	8003040 <std>
 8003146:	68e0      	ldr	r0, [r4, #12]
 8003148:	2202      	movs	r2, #2
 800314a:	2112      	movs	r1, #18
 800314c:	f7ff ff78 	bl	8003040 <std>
 8003150:	2301      	movs	r3, #1
 8003152:	61a3      	str	r3, [r4, #24]
 8003154:	e7d2      	b.n	80030fc <__sinit+0xc>
 8003156:	bf00      	nop
 8003158:	08003658 	.word	0x08003658
 800315c:	08003089 	.word	0x08003089

08003160 <__sfp>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	4607      	mov	r7, r0
 8003164:	f7ff ffac 	bl	80030c0 <__sfp_lock_acquire>
 8003168:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <__sfp+0x84>)
 800316a:	681e      	ldr	r6, [r3, #0]
 800316c:	69b3      	ldr	r3, [r6, #24]
 800316e:	b913      	cbnz	r3, 8003176 <__sfp+0x16>
 8003170:	4630      	mov	r0, r6
 8003172:	f7ff ffbd 	bl	80030f0 <__sinit>
 8003176:	3648      	adds	r6, #72	; 0x48
 8003178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800317c:	3b01      	subs	r3, #1
 800317e:	d503      	bpl.n	8003188 <__sfp+0x28>
 8003180:	6833      	ldr	r3, [r6, #0]
 8003182:	b30b      	cbz	r3, 80031c8 <__sfp+0x68>
 8003184:	6836      	ldr	r6, [r6, #0]
 8003186:	e7f7      	b.n	8003178 <__sfp+0x18>
 8003188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800318c:	b9d5      	cbnz	r5, 80031c4 <__sfp+0x64>
 800318e:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <__sfp+0x88>)
 8003190:	60e3      	str	r3, [r4, #12]
 8003192:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003196:	6665      	str	r5, [r4, #100]	; 0x64
 8003198:	f000 f847 	bl	800322a <__retarget_lock_init_recursive>
 800319c:	f7ff ff96 	bl	80030cc <__sfp_lock_release>
 80031a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031a8:	6025      	str	r5, [r4, #0]
 80031aa:	61a5      	str	r5, [r4, #24]
 80031ac:	2208      	movs	r2, #8
 80031ae:	4629      	mov	r1, r5
 80031b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031b4:	f7ff fd44 	bl	8002c40 <memset>
 80031b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031c0:	4620      	mov	r0, r4
 80031c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031c4:	3468      	adds	r4, #104	; 0x68
 80031c6:	e7d9      	b.n	800317c <__sfp+0x1c>
 80031c8:	2104      	movs	r1, #4
 80031ca:	4638      	mov	r0, r7
 80031cc:	f7ff ff62 	bl	8003094 <__sfmoreglue>
 80031d0:	4604      	mov	r4, r0
 80031d2:	6030      	str	r0, [r6, #0]
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d1d5      	bne.n	8003184 <__sfp+0x24>
 80031d8:	f7ff ff78 	bl	80030cc <__sfp_lock_release>
 80031dc:	230c      	movs	r3, #12
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	e7ee      	b.n	80031c0 <__sfp+0x60>
 80031e2:	bf00      	nop
 80031e4:	08003658 	.word	0x08003658
 80031e8:	ffff0001 	.word	0xffff0001

080031ec <_fwalk_reent>:
 80031ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031f0:	4606      	mov	r6, r0
 80031f2:	4688      	mov	r8, r1
 80031f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031f8:	2700      	movs	r7, #0
 80031fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031fe:	f1b9 0901 	subs.w	r9, r9, #1
 8003202:	d505      	bpl.n	8003210 <_fwalk_reent+0x24>
 8003204:	6824      	ldr	r4, [r4, #0]
 8003206:	2c00      	cmp	r4, #0
 8003208:	d1f7      	bne.n	80031fa <_fwalk_reent+0xe>
 800320a:	4638      	mov	r0, r7
 800320c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003210:	89ab      	ldrh	r3, [r5, #12]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d907      	bls.n	8003226 <_fwalk_reent+0x3a>
 8003216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800321a:	3301      	adds	r3, #1
 800321c:	d003      	beq.n	8003226 <_fwalk_reent+0x3a>
 800321e:	4629      	mov	r1, r5
 8003220:	4630      	mov	r0, r6
 8003222:	47c0      	blx	r8
 8003224:	4307      	orrs	r7, r0
 8003226:	3568      	adds	r5, #104	; 0x68
 8003228:	e7e9      	b.n	80031fe <_fwalk_reent+0x12>

0800322a <__retarget_lock_init_recursive>:
 800322a:	4770      	bx	lr

0800322c <__retarget_lock_acquire_recursive>:
 800322c:	4770      	bx	lr

0800322e <__retarget_lock_release_recursive>:
 800322e:	4770      	bx	lr

08003230 <__swhatbuf_r>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	460e      	mov	r6, r1
 8003234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003238:	2900      	cmp	r1, #0
 800323a:	b096      	sub	sp, #88	; 0x58
 800323c:	4614      	mov	r4, r2
 800323e:	461d      	mov	r5, r3
 8003240:	da07      	bge.n	8003252 <__swhatbuf_r+0x22>
 8003242:	2300      	movs	r3, #0
 8003244:	602b      	str	r3, [r5, #0]
 8003246:	89b3      	ldrh	r3, [r6, #12]
 8003248:	061a      	lsls	r2, r3, #24
 800324a:	d410      	bmi.n	800326e <__swhatbuf_r+0x3e>
 800324c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003250:	e00e      	b.n	8003270 <__swhatbuf_r+0x40>
 8003252:	466a      	mov	r2, sp
 8003254:	f000 f970 	bl	8003538 <_fstat_r>
 8003258:	2800      	cmp	r0, #0
 800325a:	dbf2      	blt.n	8003242 <__swhatbuf_r+0x12>
 800325c:	9a01      	ldr	r2, [sp, #4]
 800325e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003262:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003266:	425a      	negs	r2, r3
 8003268:	415a      	adcs	r2, r3
 800326a:	602a      	str	r2, [r5, #0]
 800326c:	e7ee      	b.n	800324c <__swhatbuf_r+0x1c>
 800326e:	2340      	movs	r3, #64	; 0x40
 8003270:	2000      	movs	r0, #0
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	b016      	add	sp, #88	; 0x58
 8003276:	bd70      	pop	{r4, r5, r6, pc}

08003278 <__smakebuf_r>:
 8003278:	898b      	ldrh	r3, [r1, #12]
 800327a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800327c:	079d      	lsls	r5, r3, #30
 800327e:	4606      	mov	r6, r0
 8003280:	460c      	mov	r4, r1
 8003282:	d507      	bpl.n	8003294 <__smakebuf_r+0x1c>
 8003284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	6123      	str	r3, [r4, #16]
 800328c:	2301      	movs	r3, #1
 800328e:	6163      	str	r3, [r4, #20]
 8003290:	b002      	add	sp, #8
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	ab01      	add	r3, sp, #4
 8003296:	466a      	mov	r2, sp
 8003298:	f7ff ffca 	bl	8003230 <__swhatbuf_r>
 800329c:	9900      	ldr	r1, [sp, #0]
 800329e:	4605      	mov	r5, r0
 80032a0:	4630      	mov	r0, r6
 80032a2:	f000 f879 	bl	8003398 <_malloc_r>
 80032a6:	b948      	cbnz	r0, 80032bc <__smakebuf_r+0x44>
 80032a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ac:	059a      	lsls	r2, r3, #22
 80032ae:	d4ef      	bmi.n	8003290 <__smakebuf_r+0x18>
 80032b0:	f023 0303 	bic.w	r3, r3, #3
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	81a3      	strh	r3, [r4, #12]
 80032ba:	e7e3      	b.n	8003284 <__smakebuf_r+0xc>
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <__smakebuf_r+0x7c>)
 80032be:	62b3      	str	r3, [r6, #40]	; 0x28
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	6020      	str	r0, [r4, #0]
 80032c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c8:	81a3      	strh	r3, [r4, #12]
 80032ca:	9b00      	ldr	r3, [sp, #0]
 80032cc:	6163      	str	r3, [r4, #20]
 80032ce:	9b01      	ldr	r3, [sp, #4]
 80032d0:	6120      	str	r0, [r4, #16]
 80032d2:	b15b      	cbz	r3, 80032ec <__smakebuf_r+0x74>
 80032d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032d8:	4630      	mov	r0, r6
 80032da:	f000 f93f 	bl	800355c <_isatty_r>
 80032de:	b128      	cbz	r0, 80032ec <__smakebuf_r+0x74>
 80032e0:	89a3      	ldrh	r3, [r4, #12]
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	81a3      	strh	r3, [r4, #12]
 80032ec:	89a0      	ldrh	r0, [r4, #12]
 80032ee:	4305      	orrs	r5, r0
 80032f0:	81a5      	strh	r5, [r4, #12]
 80032f2:	e7cd      	b.n	8003290 <__smakebuf_r+0x18>
 80032f4:	08003089 	.word	0x08003089

080032f8 <_free_r>:
 80032f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032fa:	2900      	cmp	r1, #0
 80032fc:	d048      	beq.n	8003390 <_free_r+0x98>
 80032fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003302:	9001      	str	r0, [sp, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f1a1 0404 	sub.w	r4, r1, #4
 800330a:	bfb8      	it	lt
 800330c:	18e4      	addlt	r4, r4, r3
 800330e:	f000 f947 	bl	80035a0 <__malloc_lock>
 8003312:	4a20      	ldr	r2, [pc, #128]	; (8003394 <_free_r+0x9c>)
 8003314:	9801      	ldr	r0, [sp, #4]
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	4615      	mov	r5, r2
 800331a:	b933      	cbnz	r3, 800332a <_free_r+0x32>
 800331c:	6063      	str	r3, [r4, #4]
 800331e:	6014      	str	r4, [r2, #0]
 8003320:	b003      	add	sp, #12
 8003322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003326:	f000 b941 	b.w	80035ac <__malloc_unlock>
 800332a:	42a3      	cmp	r3, r4
 800332c:	d90b      	bls.n	8003346 <_free_r+0x4e>
 800332e:	6821      	ldr	r1, [r4, #0]
 8003330:	1862      	adds	r2, r4, r1
 8003332:	4293      	cmp	r3, r2
 8003334:	bf04      	itt	eq
 8003336:	681a      	ldreq	r2, [r3, #0]
 8003338:	685b      	ldreq	r3, [r3, #4]
 800333a:	6063      	str	r3, [r4, #4]
 800333c:	bf04      	itt	eq
 800333e:	1852      	addeq	r2, r2, r1
 8003340:	6022      	streq	r2, [r4, #0]
 8003342:	602c      	str	r4, [r5, #0]
 8003344:	e7ec      	b.n	8003320 <_free_r+0x28>
 8003346:	461a      	mov	r2, r3
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	b10b      	cbz	r3, 8003350 <_free_r+0x58>
 800334c:	42a3      	cmp	r3, r4
 800334e:	d9fa      	bls.n	8003346 <_free_r+0x4e>
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	1855      	adds	r5, r2, r1
 8003354:	42a5      	cmp	r5, r4
 8003356:	d10b      	bne.n	8003370 <_free_r+0x78>
 8003358:	6824      	ldr	r4, [r4, #0]
 800335a:	4421      	add	r1, r4
 800335c:	1854      	adds	r4, r2, r1
 800335e:	42a3      	cmp	r3, r4
 8003360:	6011      	str	r1, [r2, #0]
 8003362:	d1dd      	bne.n	8003320 <_free_r+0x28>
 8003364:	681c      	ldr	r4, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	6053      	str	r3, [r2, #4]
 800336a:	4421      	add	r1, r4
 800336c:	6011      	str	r1, [r2, #0]
 800336e:	e7d7      	b.n	8003320 <_free_r+0x28>
 8003370:	d902      	bls.n	8003378 <_free_r+0x80>
 8003372:	230c      	movs	r3, #12
 8003374:	6003      	str	r3, [r0, #0]
 8003376:	e7d3      	b.n	8003320 <_free_r+0x28>
 8003378:	6825      	ldr	r5, [r4, #0]
 800337a:	1961      	adds	r1, r4, r5
 800337c:	428b      	cmp	r3, r1
 800337e:	bf04      	itt	eq
 8003380:	6819      	ldreq	r1, [r3, #0]
 8003382:	685b      	ldreq	r3, [r3, #4]
 8003384:	6063      	str	r3, [r4, #4]
 8003386:	bf04      	itt	eq
 8003388:	1949      	addeq	r1, r1, r5
 800338a:	6021      	streq	r1, [r4, #0]
 800338c:	6054      	str	r4, [r2, #4]
 800338e:	e7c7      	b.n	8003320 <_free_r+0x28>
 8003390:	b003      	add	sp, #12
 8003392:	bd30      	pop	{r4, r5, pc}
 8003394:	200000a4 	.word	0x200000a4

08003398 <_malloc_r>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	1ccd      	adds	r5, r1, #3
 800339c:	f025 0503 	bic.w	r5, r5, #3
 80033a0:	3508      	adds	r5, #8
 80033a2:	2d0c      	cmp	r5, #12
 80033a4:	bf38      	it	cc
 80033a6:	250c      	movcc	r5, #12
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	4606      	mov	r6, r0
 80033ac:	db01      	blt.n	80033b2 <_malloc_r+0x1a>
 80033ae:	42a9      	cmp	r1, r5
 80033b0:	d903      	bls.n	80033ba <_malloc_r+0x22>
 80033b2:	230c      	movs	r3, #12
 80033b4:	6033      	str	r3, [r6, #0]
 80033b6:	2000      	movs	r0, #0
 80033b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ba:	f000 f8f1 	bl	80035a0 <__malloc_lock>
 80033be:	4921      	ldr	r1, [pc, #132]	; (8003444 <_malloc_r+0xac>)
 80033c0:	680a      	ldr	r2, [r1, #0]
 80033c2:	4614      	mov	r4, r2
 80033c4:	b99c      	cbnz	r4, 80033ee <_malloc_r+0x56>
 80033c6:	4f20      	ldr	r7, [pc, #128]	; (8003448 <_malloc_r+0xb0>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b923      	cbnz	r3, 80033d6 <_malloc_r+0x3e>
 80033cc:	4621      	mov	r1, r4
 80033ce:	4630      	mov	r0, r6
 80033d0:	f000 f83c 	bl	800344c <_sbrk_r>
 80033d4:	6038      	str	r0, [r7, #0]
 80033d6:	4629      	mov	r1, r5
 80033d8:	4630      	mov	r0, r6
 80033da:	f000 f837 	bl	800344c <_sbrk_r>
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	d123      	bne.n	800342a <_malloc_r+0x92>
 80033e2:	230c      	movs	r3, #12
 80033e4:	6033      	str	r3, [r6, #0]
 80033e6:	4630      	mov	r0, r6
 80033e8:	f000 f8e0 	bl	80035ac <__malloc_unlock>
 80033ec:	e7e3      	b.n	80033b6 <_malloc_r+0x1e>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	1b5b      	subs	r3, r3, r5
 80033f2:	d417      	bmi.n	8003424 <_malloc_r+0x8c>
 80033f4:	2b0b      	cmp	r3, #11
 80033f6:	d903      	bls.n	8003400 <_malloc_r+0x68>
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	441c      	add	r4, r3
 80033fc:	6025      	str	r5, [r4, #0]
 80033fe:	e004      	b.n	800340a <_malloc_r+0x72>
 8003400:	6863      	ldr	r3, [r4, #4]
 8003402:	42a2      	cmp	r2, r4
 8003404:	bf0c      	ite	eq
 8003406:	600b      	streq	r3, [r1, #0]
 8003408:	6053      	strne	r3, [r2, #4]
 800340a:	4630      	mov	r0, r6
 800340c:	f000 f8ce 	bl	80035ac <__malloc_unlock>
 8003410:	f104 000b 	add.w	r0, r4, #11
 8003414:	1d23      	adds	r3, r4, #4
 8003416:	f020 0007 	bic.w	r0, r0, #7
 800341a:	1ac2      	subs	r2, r0, r3
 800341c:	d0cc      	beq.n	80033b8 <_malloc_r+0x20>
 800341e:	1a1b      	subs	r3, r3, r0
 8003420:	50a3      	str	r3, [r4, r2]
 8003422:	e7c9      	b.n	80033b8 <_malloc_r+0x20>
 8003424:	4622      	mov	r2, r4
 8003426:	6864      	ldr	r4, [r4, #4]
 8003428:	e7cc      	b.n	80033c4 <_malloc_r+0x2c>
 800342a:	1cc4      	adds	r4, r0, #3
 800342c:	f024 0403 	bic.w	r4, r4, #3
 8003430:	42a0      	cmp	r0, r4
 8003432:	d0e3      	beq.n	80033fc <_malloc_r+0x64>
 8003434:	1a21      	subs	r1, r4, r0
 8003436:	4630      	mov	r0, r6
 8003438:	f000 f808 	bl	800344c <_sbrk_r>
 800343c:	3001      	adds	r0, #1
 800343e:	d1dd      	bne.n	80033fc <_malloc_r+0x64>
 8003440:	e7cf      	b.n	80033e2 <_malloc_r+0x4a>
 8003442:	bf00      	nop
 8003444:	200000a4 	.word	0x200000a4
 8003448:	200000a8 	.word	0x200000a8

0800344c <_sbrk_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4d06      	ldr	r5, [pc, #24]	; (8003468 <_sbrk_r+0x1c>)
 8003450:	2300      	movs	r3, #0
 8003452:	4604      	mov	r4, r0
 8003454:	4608      	mov	r0, r1
 8003456:	602b      	str	r3, [r5, #0]
 8003458:	f7fd fa96 	bl	8000988 <_sbrk>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d102      	bne.n	8003466 <_sbrk_r+0x1a>
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	b103      	cbz	r3, 8003466 <_sbrk_r+0x1a>
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	bd38      	pop	{r3, r4, r5, pc}
 8003468:	20000140 	.word	0x20000140

0800346c <__sread>:
 800346c:	b510      	push	{r4, lr}
 800346e:	460c      	mov	r4, r1
 8003470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003474:	f000 f8a0 	bl	80035b8 <_read_r>
 8003478:	2800      	cmp	r0, #0
 800347a:	bfab      	itete	ge
 800347c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800347e:	89a3      	ldrhlt	r3, [r4, #12]
 8003480:	181b      	addge	r3, r3, r0
 8003482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003486:	bfac      	ite	ge
 8003488:	6563      	strge	r3, [r4, #84]	; 0x54
 800348a:	81a3      	strhlt	r3, [r4, #12]
 800348c:	bd10      	pop	{r4, pc}

0800348e <__swrite>:
 800348e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003492:	461f      	mov	r7, r3
 8003494:	898b      	ldrh	r3, [r1, #12]
 8003496:	05db      	lsls	r3, r3, #23
 8003498:	4605      	mov	r5, r0
 800349a:	460c      	mov	r4, r1
 800349c:	4616      	mov	r6, r2
 800349e:	d505      	bpl.n	80034ac <__swrite+0x1e>
 80034a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a4:	2302      	movs	r3, #2
 80034a6:	2200      	movs	r2, #0
 80034a8:	f000 f868 	bl	800357c <_lseek_r>
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b6:	81a3      	strh	r3, [r4, #12]
 80034b8:	4632      	mov	r2, r6
 80034ba:	463b      	mov	r3, r7
 80034bc:	4628      	mov	r0, r5
 80034be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034c2:	f000 b817 	b.w	80034f4 <_write_r>

080034c6 <__sseek>:
 80034c6:	b510      	push	{r4, lr}
 80034c8:	460c      	mov	r4, r1
 80034ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ce:	f000 f855 	bl	800357c <_lseek_r>
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	bf15      	itete	ne
 80034d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80034da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034e2:	81a3      	strheq	r3, [r4, #12]
 80034e4:	bf18      	it	ne
 80034e6:	81a3      	strhne	r3, [r4, #12]
 80034e8:	bd10      	pop	{r4, pc}

080034ea <__sclose>:
 80034ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ee:	f000 b813 	b.w	8003518 <_close_r>
	...

080034f4 <_write_r>:
 80034f4:	b538      	push	{r3, r4, r5, lr}
 80034f6:	4d07      	ldr	r5, [pc, #28]	; (8003514 <_write_r+0x20>)
 80034f8:	4604      	mov	r4, r0
 80034fa:	4608      	mov	r0, r1
 80034fc:	4611      	mov	r1, r2
 80034fe:	2200      	movs	r2, #0
 8003500:	602a      	str	r2, [r5, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	f7fd f869 	bl	80005da <_write>
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	d102      	bne.n	8003512 <_write_r+0x1e>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	b103      	cbz	r3, 8003512 <_write_r+0x1e>
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	bd38      	pop	{r3, r4, r5, pc}
 8003514:	20000140 	.word	0x20000140

08003518 <_close_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4d06      	ldr	r5, [pc, #24]	; (8003534 <_close_r+0x1c>)
 800351c:	2300      	movs	r3, #0
 800351e:	4604      	mov	r4, r0
 8003520:	4608      	mov	r0, r1
 8003522:	602b      	str	r3, [r5, #0]
 8003524:	f7fd f9fb 	bl	800091e <_close>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_close_r+0x1a>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b103      	cbz	r3, 8003532 <_close_r+0x1a>
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	20000140 	.word	0x20000140

08003538 <_fstat_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4d07      	ldr	r5, [pc, #28]	; (8003558 <_fstat_r+0x20>)
 800353c:	2300      	movs	r3, #0
 800353e:	4604      	mov	r4, r0
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	602b      	str	r3, [r5, #0]
 8003546:	f7fd f9f6 	bl	8000936 <_fstat>
 800354a:	1c43      	adds	r3, r0, #1
 800354c:	d102      	bne.n	8003554 <_fstat_r+0x1c>
 800354e:	682b      	ldr	r3, [r5, #0]
 8003550:	b103      	cbz	r3, 8003554 <_fstat_r+0x1c>
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	bd38      	pop	{r3, r4, r5, pc}
 8003556:	bf00      	nop
 8003558:	20000140 	.word	0x20000140

0800355c <_isatty_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4d06      	ldr	r5, [pc, #24]	; (8003578 <_isatty_r+0x1c>)
 8003560:	2300      	movs	r3, #0
 8003562:	4604      	mov	r4, r0
 8003564:	4608      	mov	r0, r1
 8003566:	602b      	str	r3, [r5, #0]
 8003568:	f7fd f9f5 	bl	8000956 <_isatty>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	d102      	bne.n	8003576 <_isatty_r+0x1a>
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	b103      	cbz	r3, 8003576 <_isatty_r+0x1a>
 8003574:	6023      	str	r3, [r4, #0]
 8003576:	bd38      	pop	{r3, r4, r5, pc}
 8003578:	20000140 	.word	0x20000140

0800357c <_lseek_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4d07      	ldr	r5, [pc, #28]	; (800359c <_lseek_r+0x20>)
 8003580:	4604      	mov	r4, r0
 8003582:	4608      	mov	r0, r1
 8003584:	4611      	mov	r1, r2
 8003586:	2200      	movs	r2, #0
 8003588:	602a      	str	r2, [r5, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	f7fd f9ee 	bl	800096c <_lseek>
 8003590:	1c43      	adds	r3, r0, #1
 8003592:	d102      	bne.n	800359a <_lseek_r+0x1e>
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	b103      	cbz	r3, 800359a <_lseek_r+0x1e>
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	bd38      	pop	{r3, r4, r5, pc}
 800359c:	20000140 	.word	0x20000140

080035a0 <__malloc_lock>:
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <__malloc_lock+0x8>)
 80035a2:	f7ff be43 	b.w	800322c <__retarget_lock_acquire_recursive>
 80035a6:	bf00      	nop
 80035a8:	20000138 	.word	0x20000138

080035ac <__malloc_unlock>:
 80035ac:	4801      	ldr	r0, [pc, #4]	; (80035b4 <__malloc_unlock+0x8>)
 80035ae:	f7ff be3e 	b.w	800322e <__retarget_lock_release_recursive>
 80035b2:	bf00      	nop
 80035b4:	20000138 	.word	0x20000138

080035b8 <_read_r>:
 80035b8:	b538      	push	{r3, r4, r5, lr}
 80035ba:	4d07      	ldr	r5, [pc, #28]	; (80035d8 <_read_r+0x20>)
 80035bc:	4604      	mov	r4, r0
 80035be:	4608      	mov	r0, r1
 80035c0:	4611      	mov	r1, r2
 80035c2:	2200      	movs	r2, #0
 80035c4:	602a      	str	r2, [r5, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f7fd f98c 	bl	80008e4 <_read>
 80035cc:	1c43      	adds	r3, r0, #1
 80035ce:	d102      	bne.n	80035d6 <_read_r+0x1e>
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	b103      	cbz	r3, 80035d6 <_read_r+0x1e>
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	20000140 	.word	0x20000140

080035dc <_init>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	bf00      	nop
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr

080035e8 <_fini>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr
